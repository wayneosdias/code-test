ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ADC.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ADC_initVar
  20              		.bss
  21              		.type	ADC_initVar, %object
  22              		.size	ADC_initVar, 1
  23              	ADC_initVar:
  24 0000 00       		.space	1
  25              		.comm	ADC_offset,2,4
  26              		.comm	ADC_countsPer10Volt,4,4
  27              		.section	.rodata
  28              		.align	2
  29              		.type	ADC_channelsConfig, %object
  30              		.size	ADC_channelsConfig, 4
  31              	ADC_channelsConfig:
  32 0000 00040000 		.word	1024
  33              		.section	.text.ADC_Start,"ax",%progbits
  34              		.align	2
  35              		.global	ADC_Start
  36              		.code	16
  37              		.thumb_func
  38              		.type	ADC_Start, %function
  39              	ADC_Start:
  40              	.LFB2:
  41              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.50
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 2


  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u };
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  42              		.loc 1 64 0
  43              		.cfi_startproc
  44              		@ args = 0, pretend = 0, frame = 0
  45              		@ frame_needed = 1, uses_anonymous_args = 0
  46 0000 80B5     		push	{r7, lr}
  47              		.cfi_def_cfa_offset 8
  48              		.cfi_offset 7, -8
  49              		.cfi_offset 14, -4
  50 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 3


  51              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  52              		.loc 1 66 0
  53 0004 064B     		ldr	r3, .L3
  54 0006 1B78     		ldrb	r3, [r3]
  55 0008 002B     		cmp	r3, #0
  56 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  57              		.loc 1 68 0
  58 000c FFF7FEFF 		bl	ADC_Init
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  59              		.loc 1 69 0
  60 0010 034B     		ldr	r3, .L3
  61 0012 0122     		movs	r2, #1
  62 0014 1A70     		strb	r2, [r3]
  63              	.L2:
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  64              		.loc 1 71 0
  65 0016 FFF7FEFF 		bl	ADC_Enable
  72:Generated_Source\PSoC4/ADC.c **** }
  66              		.loc 1 72 0
  67 001a C046     		nop
  68 001c BD46     		mov	sp, r7
  69              		@ sp needed
  70 001e 80BD     		pop	{r7, pc}
  71              	.L4:
  72              		.align	2
  73              	.L3:
  74 0020 00000000 		.word	ADC_initVar
  75              		.cfi_endproc
  76              	.LFE2:
  77              		.size	ADC_Start, .-ADC_Start
  78              		.global	__aeabi_idiv
  79              		.section	.text.ADC_Init,"ax",%progbits
  80              		.align	2
  81              		.global	ADC_Init
  82              		.code	16
  83              		.thumb_func
  84              		.type	ADC_Init, %function
  85              	ADC_Init:
  86              	.LFB3:
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 4


  86:Generated_Source\PSoC4/ADC.c **** *
  87:Generated_Source\PSoC4/ADC.c **** * Return:
  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  87              		.loc 1 95 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 16
  90              		@ frame_needed = 1, uses_anonymous_args = 0
  91 0000 80B5     		push	{r7, lr}
  92              		.cfi_def_cfa_offset 8
  93              		.cfi_offset 7, -8
  94              		.cfi_offset 14, -4
  95 0002 84B0     		sub	sp, sp, #16
  96              		.cfi_def_cfa_offset 24
  97 0004 00AF     		add	r7, sp, #0
  98              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 5


 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC.c ****         };
 168:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC.c **** 
 170:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  99              		.loc 1 172 0
 100 0006 0321     		movs	r1, #3
 101 0008 0F20     		movs	r0, #15
 102 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
 103              		.loc 1 173 0
 104 000e 5A4B     		ldr	r3, .L17
 105 0010 1900     		movs	r1, r3
 106 0012 0F20     		movs	r0, #15
 107 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC.c **** 
 176:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 108              		.loc 1 177 0
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 6


 109 0018 584B     		ldr	r3, .L17+4
 110 001a 0122     		movs	r2, #1
 111 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 112              		.loc 1 180 0
 113 001e 584B     		ldr	r3, .L17+8
 114 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0
 116 0022 002B     		cmp	r3, #0
 117 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 is_stmt 0 discriminator 1
 119 0026 5749     		ldr	r1, .L17+12
 120 0028 00E0     		b	.L7
 121              	.L6:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 122              		.loc 1 178 0 discriminator 2
 123 002a 5749     		ldr	r1, .L17+16
 124              	.L7:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 125              		.loc 1 178 0 discriminator 4
 126 002c 574B     		ldr	r3, .L17+20
 127 002e 574A     		ldr	r2, .L17+20
 128 0030 1268     		ldr	r2, [r2]
 129 0032 0A43     		orrs	r2, r1
 130 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 131              		.loc 1 182 0 is_stmt 1 discriminator 4
 132 0036 564B     		ldr	r3, .L17+24
 133 0038 564A     		ldr	r2, .L17+28
 134 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 135              		.loc 1 183 0 discriminator 4
 136 003c 564B     		ldr	r3, .L17+32
 137 003e 574A     		ldr	r2, .L17+36
 138 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 139              		.loc 1 184 0 discriminator 4
 140 0042 574B     		ldr	r3, .L17+40
 141 0044 0022     		movs	r2, #0
 142 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 143              		.loc 1 185 0 discriminator 4
 144 0048 564B     		ldr	r3, .L17+44
 145 004a 574A     		ldr	r2, .L17+48
 146 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 147              		.loc 1 186 0 discriminator 4
 148 004e 574B     		ldr	r3, .L17+52
 149 0050 554A     		ldr	r2, .L17+48
 150 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/ADC.c ****     
 188:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 7


 189:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 151              		.loc 1 190 0 discriminator 4
 152 0054 564B     		ldr	r3, .L17+56
 153 0056 564A     		ldr	r2, .L17+56
 154 0058 1268     		ldr	r2, [r2]
 155 005a 8021     		movs	r1, #128
 156 005c 4902     		lsls	r1, r1, #9
 157 005e 0A43     		orrs	r2, r1
 158 0060 1A60     		str	r2, [r3]
 191:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC.c **** 
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 159              		.loc 1 197 0 discriminator 4
 160 0062 544B     		ldr	r3, .L17+60
 161 0064 0022     		movs	r2, #0
 162 0066 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 163              		.loc 1 198 0 discriminator 4
 164 0068 534B     		ldr	r3, .L17+64
 165 006a 0022     		movs	r2, #0
 166 006c 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 167              		.loc 1 199 0 discriminator 4
 168 006e 534B     		ldr	r3, .L17+68
 169 0070 0122     		movs	r2, #1
 170 0072 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/ADC.c **** 
 201:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC.c **** 
 205:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 171              		.loc 1 206 0 discriminator 4
 172 0074 524B     		ldr	r3, .L17+72
 173 0076 1B68     		ldr	r3, [r3]
 174 0078 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 175              		.loc 1 207 0 discriminator 4
 176 007a 7B68     		ldr	r3, [r7, #4]
 177 007c 514A     		ldr	r2, .L17+76
 178 007e 1340     		ands	r3, r2
 179 0080 7B60     		str	r3, [r7, #4]
 208:Generated_Source\PSoC4/ADC.c ****     
 209:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC.c ****     #else
 216:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 8


 217:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:Generated_Source\PSoC4/ADC.c ****         #else
 220:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 180              		.loc 1 220 0 discriminator 4
 181 0082 7B68     		ldr	r3, [r7, #4]
 182 0084 8022     		movs	r2, #128
 183 0086 9205     		lsls	r2, r2, #22
 184 0088 1343     		orrs	r3, r2
 185 008a 7B60     		str	r3, [r7, #4]
 221:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 186              		.loc 1 221 0 discriminator 4
 187 008c 7B68     		ldr	r3, [r7, #4]
 188 008e 0122     		movs	r2, #1
 189 0090 9343     		bics	r3, r2
 190 0092 7B60     		str	r3, [r7, #4]
 222:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC.c ****     
 226:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 191              		.loc 1 226 0 discriminator 4
 192 0094 4A4B     		ldr	r3, .L17+72
 193 0096 7A68     		ldr	r2, [r7, #4]
 194 0098 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC.c **** 
 232:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 195              		.loc 1 232 0 discriminator 4
 196 009a 0023     		movs	r3, #0
 197 009c FB60     		str	r3, [r7, #12]
 198 009e 63E0     		b	.L8
 199              	.L16:
 233:Generated_Source\PSoC4/ADC.c ****     {
 234:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 200              		.loc 1 234 0
 201 00a0 8023     		movs	r3, #128
 202 00a2 DA00     		lsls	r2, r3, #3
 203 00a4 DC23     		movs	r3, #220
 204 00a6 9B01     		lsls	r3, r3, #6
 205 00a8 1340     		ands	r3, r2
 206 00aa 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 237:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC.c ****         
 239:Generated_Source\PSoC4/ADC.c ****         
 240:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC.c ****         */
 244:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 9


 247:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC.c **** 
 249:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC.c ****         {
 253:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 207              		.loc 1 253 0
 208 00ac FB68     		ldr	r3, [r7, #12]
 209 00ae 9B00     		lsls	r3, r3, #2
 210 00b0 454A     		ldr	r2, .L17+80
 211 00b2 9446     		mov	ip, r2
 212 00b4 6344     		add	r3, r3, ip
 213 00b6 7A68     		ldr	r2, [r7, #4]
 214 00b8 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/ADC.c **** 
 255:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 215              		.loc 1 255 0
 216 00ba 8023     		movs	r3, #128
 217 00bc DB00     		lsls	r3, r3, #3
 218 00be 0122     		movs	r2, #1
 219 00c0 1340     		ands	r3, r2
 220 00c2 0AD0     		beq	.L9
 256:Generated_Source\PSoC4/ADC.c ****             {
 257:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 221              		.loc 1 257 0
 222 00c4 3B4B     		ldr	r3, .L17+60
 223 00c6 3B4A     		ldr	r2, .L17+60
 224 00c8 1168     		ldr	r1, [r2]
 225 00ca 0120     		movs	r0, #1
 226 00cc FA68     		ldr	r2, [r7, #12]
 227 00ce 9040     		lsls	r0, r0, r2
 228 00d0 0200     		movs	r2, r0
 229 00d2 1204     		lsls	r2, r2, #16
 230 00d4 120C     		lsrs	r2, r2, #16
 231 00d6 0A43     		orrs	r2, r1
 232 00d8 1A60     		str	r2, [r3]
 233              	.L9:
 258:Generated_Source\PSoC4/ADC.c ****             }
 259:Generated_Source\PSoC4/ADC.c **** 
 260:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 234              		.loc 1 260 0
 235 00da 8023     		movs	r3, #128
 236 00dc DB00     		lsls	r3, r3, #3
 237 00de 0222     		movs	r2, #2
 238 00e0 1340     		ands	r3, r2
 239 00e2 0AD0     		beq	.L10
 261:Generated_Source\PSoC4/ADC.c ****             {
 262:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 240              		.loc 1 262 0
 241 00e4 344B     		ldr	r3, .L17+64
 242 00e6 344A     		ldr	r2, .L17+64
 243 00e8 1168     		ldr	r1, [r2]
 244 00ea 0120     		movs	r0, #1
 245 00ec FA68     		ldr	r2, [r7, #12]
 246 00ee 9040     		lsls	r0, r0, r2
 247 00f0 0200     		movs	r2, r0
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 10


 248 00f2 1204     		lsls	r2, r2, #16
 249 00f4 120C     		lsrs	r2, r2, #16
 250 00f6 0A43     		orrs	r2, r1
 251 00f8 1A60     		str	r2, [r3]
 252              	.L10:
 263:Generated_Source\PSoC4/ADC.c ****             }
 264:Generated_Source\PSoC4/ADC.c ****         }
 265:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC.c ****             else
 267:Generated_Source\PSoC4/ADC.c ****             {
 268:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:Generated_Source\PSoC4/ADC.c **** 
 270:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC.c ****                 {
 272:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC.c ****                 }
 274:Generated_Source\PSoC4/ADC.c **** 
 275:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/ADC.c ****                 {
 277:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC.c ****                 }
 279:Generated_Source\PSoC4/ADC.c ****             }
 280:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC.c **** 
 282:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 253              		.loc 1 282 0
 254 00fa 8023     		movs	r3, #128
 255 00fc DA00     		lsls	r2, r3, #3
 256 00fe 8023     		movs	r3, #128
 257 0100 9B00     		lsls	r3, r3, #2
 258 0102 1340     		ands	r3, r2
 259 0104 03D0     		beq	.L11
 283:Generated_Source\PSoC4/ADC.c ****         {
 284:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 260              		.loc 1 284 0
 261 0106 8023     		movs	r3, #128
 262 0108 5B00     		lsls	r3, r3, #1
 263 010a BB60     		str	r3, [r7, #8]
 264 010c 02E0     		b	.L12
 265              	.L11:
 285:Generated_Source\PSoC4/ADC.c ****         }
 286:Generated_Source\PSoC4/ADC.c ****         else
 287:Generated_Source\PSoC4/ADC.c ****         {
 288:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 266              		.loc 1 288 0
 267 010e 8023     		movs	r3, #128
 268 0110 5B01     		lsls	r3, r3, #5
 269 0112 BB60     		str	r3, [r7, #8]
 270              	.L12:
 289:Generated_Source\PSoC4/ADC.c ****         }
 290:Generated_Source\PSoC4/ADC.c **** 
 291:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 271              		.loc 1 291 0
 272 0114 8023     		movs	r3, #128
 273 0116 DA00     		lsls	r2, r3, #3
 274 0118 8023     		movs	r3, #128
 275 011a 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 11


 276 011c 1340     		ands	r3, r2
 277 011e 05D1     		bne	.L13
 292:Generated_Source\PSoC4/ADC.c ****         {
 293:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC.c ****             #else
 298:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 278              		.loc 1 298 0
 279 0120 2A4B     		ldr	r3, .L17+84
 280 0122 FA68     		ldr	r2, [r7, #12]
 281 0124 5200     		lsls	r2, r2, #1
 282 0126 0021     		movs	r1, #0
 283 0128 D152     		strh	r1, [r2, r3]
 284 012a 09E0     		b	.L14
 285              	.L13:
 299:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:Generated_Source\PSoC4/ADC.c ****         }
 301:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC.c ****         {
 303:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 286              		.loc 1 305 0
 287 012c BB68     		ldr	r3, [r7, #8]
 288 012e 002B     		cmp	r3, #0
 289 0130 00DA     		bge	.L15
 290 0132 0133     		adds	r3, r3, #1
 291              	.L15:
 292 0134 5B10     		asrs	r3, r3, #1
 293 0136 19B2     		sxth	r1, r3
 294 0138 244B     		ldr	r3, .L17+84
 295 013a FA68     		ldr	r2, [r7, #12]
 296 013c 5200     		lsls	r2, r2, #1
 297 013e D152     		strh	r1, [r2, r3]
 298              	.L14:
 306:Generated_Source\PSoC4/ADC.c ****             #else
 307:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 308:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:Generated_Source\PSoC4/ADC.c ****         }
 310:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 299              		.loc 1 311 0 discriminator 2
 300 0140 BB68     		ldr	r3, [r7, #8]
 301 0142 234A     		ldr	r2, .L17+88
 302 0144 5343     		muls	r3, r2
 303 0146 234A     		ldr	r2, .L17+92
 304 0148 9446     		mov	ip, r2
 305 014a 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 306              		.loc 1 312 0 discriminator 2
 307 014c 2249     		ldr	r1, .L17+96
 308 014e 1800     		movs	r0, r3
 309 0150 FFF7FEFF 		bl	__aeabi_idiv
 310 0154 0300     		movs	r3, r0
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 12


 311              		.loc 1 311 0 discriminator 2
 312 0156 1BB2     		sxth	r3, r3
 313 0158 1900     		movs	r1, r3
 314 015a 204B     		ldr	r3, .L17+100
 315 015c FA68     		ldr	r2, [r7, #12]
 316 015e 9200     		lsls	r2, r2, #2
 317 0160 D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/ADC.c ****     {
 318              		.loc 1 232 0 discriminator 2
 319 0162 FB68     		ldr	r3, [r7, #12]
 320 0164 0133     		adds	r3, r3, #1
 321 0166 FB60     		str	r3, [r7, #12]
 322              	.L8:
 232:Generated_Source\PSoC4/ADC.c ****     {
 323              		.loc 1 232 0 is_stmt 0 discriminator 1
 324 0168 FB68     		ldr	r3, [r7, #12]
 325 016a 002B     		cmp	r3, #0
 326 016c 98D0     		beq	.L16
 313:Generated_Source\PSoC4/ADC.c ****     }
 314:Generated_Source\PSoC4/ADC.c **** }
 327              		.loc 1 314 0 is_stmt 1
 328 016e C046     		nop
 329 0170 BD46     		mov	sp, r7
 330 0172 04B0     		add	sp, sp, #16
 331              		@ sp needed
 332 0174 80BD     		pop	{r7, pc}
 333              	.L18:
 334 0176 C046     		.align	2
 335              	.L17:
 336 0178 00000000 		.word	ADC_ISR
 337 017c 20003A40 		.word	1077542944
 338 0180 80033A40 		.word	1077543808
 339 0184 70021053 		.word	1393558128
 340 0188 70020053 		.word	1392509552
 341 018c 00003A40 		.word	1077542912
 342 0190 04003A40 		.word	1077542916
 343 0194 C4000A80 		.word	-2146828092
 344 0198 18003A40 		.word	1077542936
 345 019c 0000FF07 		.word	134152192
 346 01a0 1C003A40 		.word	1077542940
 347 01a4 10003A40 		.word	1077542928
 348 01a8 04000400 		.word	262148
 349 01ac 14003A40 		.word	1077542932
 350 01b0 00033A40 		.word	1077543680
 351 01b4 28023A40 		.word	1077543464
 352 01b8 38023A40 		.word	1077543480
 353 01bc 18023A40 		.word	1077543448
 354 01c0 30003A40 		.word	1077542960
 355 01c4 FFFFFFDF 		.word	-536870913
 356 01c8 80003A40 		.word	1077543040
 357 01cc 00000000 		.word	ADC_offset
 358 01d0 10270000 		.word	10000
 359 01d4 E40C0000 		.word	3300
 360 01d8 C8190000 		.word	6600
 361 01dc 00000000 		.word	ADC_countsPer10Volt
 362              		.cfi_endproc
 363              	.LFE3:
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 13


 364              		.size	ADC_Init, .-ADC_Init
 365              		.section	.text.ADC_Enable,"ax",%progbits
 366              		.align	2
 367              		.global	ADC_Enable
 368              		.code	16
 369              		.thumb_func
 370              		.type	ADC_Enable, %function
 371              	ADC_Enable:
 372              	.LFB4:
 315:Generated_Source\PSoC4/ADC.c **** 
 316:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC.c **** *
 320:Generated_Source\PSoC4/ADC.c **** * Summary:
 321:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC.c **** *
 323:Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC.c **** *  None.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Return:
 327:Generated_Source\PSoC4/ADC.c **** *  None.
 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:Generated_Source\PSoC4/ADC.c **** {
 373              		.loc 1 331 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377 0000 80B5     		push	{r7, lr}
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 7, -8
 380              		.cfi_offset 14, -4
 381 0002 00AF     		add	r7, sp, #0
 382              		.cfi_def_cfa_register 7
 332:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 383              		.loc 1 332 0
 384 0004 0A4B     		ldr	r3, .L23
 385 0006 1B68     		ldr	r3, [r3]
 386 0008 002B     		cmp	r3, #0
 387 000a 0EDB     		blt	.L22
 333:Generated_Source\PSoC4/ADC.c ****     {
 334:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC.c **** 
 336:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 388              		.loc 1 336 0
 389 000c C046     		nop
 390              	.L21:
 391              		.loc 1 336 0 is_stmt 0 discriminator 1
 392 000e 094B     		ldr	r3, .L23+4
 393 0010 1B68     		ldr	r3, [r3]
 394 0012 002B     		cmp	r3, #0
 395 0014 FBDB     		blt	.L21
 337:Generated_Source\PSoC4/ADC.c ****             {
 338:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC.c ****             }
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 14


 340:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC.c ****         
 342:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 396              		.loc 1 342 0 is_stmt 1
 397 0016 064B     		ldr	r3, .L23
 398 0018 054A     		ldr	r2, .L23
 399 001a 1268     		ldr	r2, [r2]
 400 001c 8021     		movs	r1, #128
 401 001e 0906     		lsls	r1, r1, #24
 402 0020 0A43     		orrs	r2, r1
 403 0022 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC.c ****         
 344:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 404              		.loc 1 345 0
 405 0024 0A20     		movs	r0, #10
 406 0026 FFF7FEFF 		bl	CyDelayUs
 407              	.L22:
 346:Generated_Source\PSoC4/ADC.c ****     }
 347:Generated_Source\PSoC4/ADC.c **** }
 408              		.loc 1 347 0
 409 002a C046     		nop
 410 002c BD46     		mov	sp, r7
 411              		@ sp needed
 412 002e 80BD     		pop	{r7, pc}
 413              	.L24:
 414              		.align	2
 415              	.L23:
 416 0030 00003A40 		.word	1077542912
 417 0034 08023A40 		.word	1077543432
 418              		.cfi_endproc
 419              	.LFE4:
 420              		.size	ADC_Enable, .-ADC_Enable
 421              		.section	.text.ADC_Stop,"ax",%progbits
 422              		.align	2
 423              		.global	ADC_Stop
 424              		.code	16
 425              		.thumb_func
 426              		.type	ADC_Stop, %function
 427              	ADC_Stop:
 428              	.LFB5:
 348:Generated_Source\PSoC4/ADC.c **** 
 349:Generated_Source\PSoC4/ADC.c **** 
 350:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC.c **** *
 354:Generated_Source\PSoC4/ADC.c **** * Summary:
 355:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC.c **** *  mode.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC.c **** *  None.
 360:Generated_Source\PSoC4/ADC.c **** *
 361:Generated_Source\PSoC4/ADC.c **** * Return:
 362:Generated_Source\PSoC4/ADC.c **** *  None.
 363:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 15


 364:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:Generated_Source\PSoC4/ADC.c **** {
 429              		.loc 1 366 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 1, uses_anonymous_args = 0
 433 0000 80B5     		push	{r7, lr}
 434              		.cfi_def_cfa_offset 8
 435              		.cfi_offset 7, -8
 436              		.cfi_offset 14, -4
 437 0002 00AF     		add	r7, sp, #0
 438              		.cfi_def_cfa_register 7
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 439              		.loc 1 367 0
 440 0004 044B     		ldr	r3, .L26
 441 0006 044A     		ldr	r2, .L26
 442 0008 1268     		ldr	r2, [r2]
 443 000a 5200     		lsls	r2, r2, #1
 444 000c 5208     		lsrs	r2, r2, #1
 445 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/ADC.c **** }
 446              		.loc 1 368 0
 447 0010 C046     		nop
 448 0012 BD46     		mov	sp, r7
 449              		@ sp needed
 450 0014 80BD     		pop	{r7, pc}
 451              	.L27:
 452 0016 C046     		.align	2
 453              	.L26:
 454 0018 00003A40 		.word	1077542912
 455              		.cfi_endproc
 456              	.LFE5:
 457              		.size	ADC_Stop, .-ADC_Stop
 458              		.section	.text.ADC_StartConvert,"ax",%progbits
 459              		.align	2
 460              		.global	ADC_StartConvert
 461              		.code	16
 462              		.thumb_func
 463              		.type	ADC_StartConvert, %function
 464              	ADC_StartConvert:
 465              	.LFB6:
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** 
 371:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC.c **** *
 375:Generated_Source\PSoC4/ADC.c **** * Summary:
 376:Generated_Source\PSoC4/ADC.c **** *  Description:
 377:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 16


 384:Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC.c **** *  None.
 386:Generated_Source\PSoC4/ADC.c **** *
 387:Generated_Source\PSoC4/ADC.c **** * Return:
 388:Generated_Source\PSoC4/ADC.c **** *  None.
 389:Generated_Source\PSoC4/ADC.c **** *
 390:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:Generated_Source\PSoC4/ADC.c **** {
 466              		.loc 1 392 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 1, uses_anonymous_args = 0
 470 0000 80B5     		push	{r7, lr}
 471              		.cfi_def_cfa_offset 8
 472              		.cfi_offset 7, -8
 473              		.cfi_offset 14, -4
 474 0002 00AF     		add	r7, sp, #0
 475              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 395:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 476              		.loc 1 396 0
 477 0004 024B     		ldr	r3, .L29
 478 0006 0122     		movs	r2, #1
 479 0008 1A60     		str	r2, [r3]
 397:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:Generated_Source\PSoC4/ADC.c **** 
 399:Generated_Source\PSoC4/ADC.c **** }
 480              		.loc 1 399 0
 481 000a C046     		nop
 482 000c BD46     		mov	sp, r7
 483              		@ sp needed
 484 000e 80BD     		pop	{r7, pc}
 485              	.L30:
 486              		.align	2
 487              	.L29:
 488 0010 24003A40 		.word	1077542948
 489              		.cfi_endproc
 490              	.LFE6:
 491              		.size	ADC_StartConvert, .-ADC_StartConvert
 492              		.section	.text.ADC_StopConvert,"ax",%progbits
 493              		.align	2
 494              		.global	ADC_StopConvert
 495              		.code	16
 496              		.thumb_func
 497              		.type	ADC_StopConvert, %function
 498              	ADC_StopConvert:
 499              	.LFB7:
 400:Generated_Source\PSoC4/ADC.c **** 
 401:Generated_Source\PSoC4/ADC.c **** 
 402:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC.c **** *
 406:Generated_Source\PSoC4/ADC.c **** * Summary:
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 17


 407:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC.c **** *
 409:Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC.c **** *  None.
 411:Generated_Source\PSoC4/ADC.c **** *
 412:Generated_Source\PSoC4/ADC.c **** * Return:
 413:Generated_Source\PSoC4/ADC.c **** *  None.
 414:Generated_Source\PSoC4/ADC.c **** *
 415:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:Generated_Source\PSoC4/ADC.c **** {
 500              		.loc 1 417 0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 0
 503              		@ frame_needed = 1, uses_anonymous_args = 0
 504 0000 80B5     		push	{r7, lr}
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 7, -8
 507              		.cfi_offset 14, -4
 508 0002 00AF     		add	r7, sp, #0
 509              		.cfi_def_cfa_register 7
 418:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 420:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:Generated_Source\PSoC4/ADC.c **** }
 510              		.loc 1 421 0
 511 0004 C046     		nop
 512 0006 BD46     		mov	sp, r7
 513              		@ sp needed
 514 0008 80BD     		pop	{r7, pc}
 515              		.cfi_endproc
 516              	.LFE7:
 517              		.size	ADC_StopConvert, .-ADC_StopConvert
 518              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 519              		.align	2
 520              		.global	ADC_IsEndConversion
 521              		.code	16
 522              		.thumb_func
 523              		.type	ADC_IsEndConversion, %function
 524              	ADC_IsEndConversion:
 525              	.LFB8:
 422:Generated_Source\PSoC4/ADC.c **** 
 423:Generated_Source\PSoC4/ADC.c **** 
 424:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC.c **** *
 428:Generated_Source\PSoC4/ADC.c **** * Summary:
 429:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC.c **** *  completed.
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * Parameters:
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 18


 438:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC.c **** *
 445:Generated_Source\PSoC4/ADC.c **** * Return:
 446:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC.c **** *
 449:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC.c **** {
 526              		.loc 1 451 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 16
 529              		@ frame_needed = 1, uses_anonymous_args = 0
 530 0000 80B5     		push	{r7, lr}
 531              		.cfi_def_cfa_offset 8
 532              		.cfi_offset 7, -8
 533              		.cfi_offset 14, -4
 534 0002 84B0     		sub	sp, sp, #16
 535              		.cfi_def_cfa_offset 24
 536 0004 00AF     		add	r7, sp, #0
 537              		.cfi_def_cfa_register 7
 538 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 539              		.loc 1 452 0
 540 0008 0023     		movs	r3, #0
 541 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/ADC.c **** 
 454:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 542              		.loc 1 454 0
 543 000c 7B68     		ldr	r3, [r7, #4]
 544 000e 0322     		movs	r2, #3
 545 0010 1340     		ands	r3, r2
 546 0012 11D0     		beq	.L33
 547              	.L35:
 455:Generated_Source\PSoC4/ADC.c ****     {
 456:Generated_Source\PSoC4/ADC.c ****         do
 457:Generated_Source\PSoC4/ADC.c ****         {
 458:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 548              		.loc 1 458 0 discriminator 2
 549 0014 0B4B     		ldr	r3, .L37
 550 0016 1B68     		ldr	r3, [r3]
 551 0018 0122     		movs	r2, #1
 552 001a 1340     		ands	r3, r2
 553 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 554              		.loc 1 459 0 discriminator 2
 555 001e FB68     		ldr	r3, [r7, #12]
 556 0020 002B     		cmp	r3, #0
 557 0022 03D1     		bne	.L34
 558              		.loc 1 459 0 is_stmt 0 discriminator 1
 559 0024 7B68     		ldr	r3, [r7, #4]
 560 0026 0222     		movs	r2, #2
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 19


 561 0028 1340     		ands	r3, r2
 562 002a F3D1     		bne	.L35
 563              	.L34:
 460:Generated_Source\PSoC4/ADC.c **** 
 461:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 564              		.loc 1 461 0 is_stmt 1
 565 002c FB68     		ldr	r3, [r7, #12]
 566 002e 002B     		cmp	r3, #0
 567 0030 02D0     		beq	.L33
 462:Generated_Source\PSoC4/ADC.c ****         {
 463:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 568              		.loc 1 464 0
 569 0032 044B     		ldr	r3, .L37
 570 0034 0122     		movs	r2, #1
 571 0036 1A60     		str	r2, [r3]
 572              	.L33:
 465:Generated_Source\PSoC4/ADC.c ****         }
 466:Generated_Source\PSoC4/ADC.c ****     }
 467:Generated_Source\PSoC4/ADC.c **** 
 468:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC.c ****         {
 471:Generated_Source\PSoC4/ADC.c ****             do
 472:Generated_Source\PSoC4/ADC.c ****             {
 473:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC.c **** 
 477:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC.c ****             {
 479:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/ADC.c ****             }
 482:Generated_Source\PSoC4/ADC.c ****         }
 483:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC.c **** 
 485:Generated_Source\PSoC4/ADC.c ****     return (status);
 573              		.loc 1 485 0
 574 0038 FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/ADC.c **** }
 575              		.loc 1 486 0
 576 003a 1800     		movs	r0, r3
 577 003c BD46     		mov	sp, r7
 578 003e 04B0     		add	sp, sp, #16
 579              		@ sp needed
 580 0040 80BD     		pop	{r7, pc}
 581              	.L38:
 582 0042 C046     		.align	2
 583              	.L37:
 584 0044 10023A40 		.word	1077543440
 585              		.cfi_endproc
 586              	.LFE8:
 587              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 588              		.section	.text.ADC_GetResult16,"ax",%progbits
 589              		.align	2
 590              		.global	ADC_GetResult16
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 20


 591              		.code	16
 592              		.thumb_func
 593              		.type	ADC_GetResult16, %function
 594              	ADC_GetResult16:
 595              	.LFB9:
 487:Generated_Source\PSoC4/ADC.c **** 
 488:Generated_Source\PSoC4/ADC.c **** 
 489:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * Summary:
 494:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC.c **** *
 500:Generated_Source\PSoC4/ADC.c **** * Return:
 501:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC.c **** *
 503:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC.c **** {
 596              		.loc 1 505 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 16
 599              		@ frame_needed = 1, uses_anonymous_args = 0
 600 0000 80B5     		push	{r7, lr}
 601              		.cfi_def_cfa_offset 8
 602              		.cfi_offset 7, -8
 603              		.cfi_offset 14, -4
 604 0002 84B0     		sub	sp, sp, #16
 605              		.cfi_def_cfa_offset 24
 606 0004 00AF     		add	r7, sp, #0
 607              		.cfi_def_cfa_register 7
 608 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC.c **** 
 508:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 609              		.loc 1 509 0
 610 0008 7B68     		ldr	r3, [r7, #4]
 611 000a 002B     		cmp	r3, #0
 612 000c 02D0     		beq	.L40
 613              		.loc 1 509 0 is_stmt 0 discriminator 1
 614 000e 0020     		movs	r0, #0
 615 0010 FFF7FEFF 		bl	CyHalt
 616              	.L40:
 510:Generated_Source\PSoC4/ADC.c **** 
 511:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 617              		.loc 1 511 0 is_stmt 1
 618 0014 7B68     		ldr	r3, [r7, #4]
 619 0016 002B     		cmp	r3, #0
 620 0018 09D1     		bne	.L41
 512:Generated_Source\PSoC4/ADC.c ****     {
 513:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 21


 621              		.loc 1 513 0
 622 001a 7B68     		ldr	r3, [r7, #4]
 623 001c 9B00     		lsls	r3, r3, #2
 624 001e 084A     		ldr	r2, .L44
 625 0020 9446     		mov	ip, r2
 626 0022 6344     		add	r3, r3, ip
 627 0024 1B68     		ldr	r3, [r3]
 628 0026 1B04     		lsls	r3, r3, #16
 629 0028 1B0C     		lsrs	r3, r3, #16
 630 002a FB60     		str	r3, [r7, #12]
 631 002c 01E0     		b	.L42
 632              	.L41:
 514:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC.c ****     }
 516:Generated_Source\PSoC4/ADC.c ****     else
 517:Generated_Source\PSoC4/ADC.c ****     {
 518:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC.c ****         #else
 521:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 633              		.loc 1 521 0
 634 002e 0023     		movs	r3, #0
 635 0030 FB60     		str	r3, [r7, #12]
 636              	.L42:
 522:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC.c ****     }
 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 637              		.loc 1 525 0
 638 0032 FB68     		ldr	r3, [r7, #12]
 639 0034 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/ADC.c **** }
 640              		.loc 1 526 0
 641 0036 1800     		movs	r0, r3
 642 0038 BD46     		mov	sp, r7
 643 003a 04B0     		add	sp, sp, #16
 644              		@ sp needed
 645 003c 80BD     		pop	{r7, pc}
 646              	.L45:
 647 003e C046     		.align	2
 648              	.L44:
 649 0040 80013A40 		.word	1077543296
 650              		.cfi_endproc
 651              	.LFE9:
 652              		.size	ADC_GetResult16, .-ADC_GetResult16
 653              		.section	.text.ADC_SetChanMask,"ax",%progbits
 654              		.align	2
 655              		.global	ADC_SetChanMask
 656              		.code	16
 657              		.thumb_func
 658              		.type	ADC_SetChanMask, %function
 659              	ADC_SetChanMask:
 660              	.LFB10:
 527:Generated_Source\PSoC4/ADC.c **** 
 528:Generated_Source\PSoC4/ADC.c **** 
 529:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 22


 531:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC.c **** *
 533:Generated_Source\PSoC4/ADC.c **** * Summary:
 534:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC.c **** *
 536:Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC.c **** *
 545:Generated_Source\PSoC4/ADC.c **** * Return:
 546:Generated_Source\PSoC4/ADC.c **** *  None.
 547:Generated_Source\PSoC4/ADC.c **** *
 548:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC.c **** {
 661              		.loc 1 550 0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 8
 664              		@ frame_needed = 1, uses_anonymous_args = 0
 665 0000 80B5     		push	{r7, lr}
 666              		.cfi_def_cfa_offset 8
 667              		.cfi_offset 7, -8
 668              		.cfi_offset 14, -4
 669 0002 82B0     		sub	sp, sp, #8
 670              		.cfi_def_cfa_offset 16
 671 0004 00AF     		add	r7, sp, #0
 672              		.cfi_def_cfa_register 7
 673 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 674              		.loc 1 551 0
 675 0008 044B     		ldr	r3, .L47
 676 000a 7A68     		ldr	r2, [r7, #4]
 677 000c 0121     		movs	r1, #1
 678 000e 0A40     		ands	r2, r1
 679 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/ADC.c **** }
 680              		.loc 1 552 0
 681 0012 C046     		nop
 682 0014 BD46     		mov	sp, r7
 683 0016 02B0     		add	sp, sp, #8
 684              		@ sp needed
 685 0018 80BD     		pop	{r7, pc}
 686              	.L48:
 687 001a C046     		.align	2
 688              	.L47:
 689 001c 20003A40 		.word	1077542944
 690              		.cfi_endproc
 691              	.LFE10:
 692              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 693              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 694              		.align	2
 695              		.global	ADC_SetLowLimit
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 23


 696              		.code	16
 697              		.thumb_func
 698              		.type	ADC_SetLowLimit, %function
 699              	ADC_SetLowLimit:
 700              	.LFB11:
 553:Generated_Source\PSoC4/ADC.c **** 
 554:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC.c **** 
 556:Generated_Source\PSoC4/ADC.c **** 
 557:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC.c ****     *
 561:Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC.c ****     *
 564:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC.c ****     *  None.
 566:Generated_Source\PSoC4/ADC.c ****     *
 567:Generated_Source\PSoC4/ADC.c ****     * Return:
 568:Generated_Source\PSoC4/ADC.c ****     *  None.
 569:Generated_Source\PSoC4/ADC.c ****     *
 570:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC.c ****     {
 573:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC.c ****     }
 575:Generated_Source\PSoC4/ADC.c **** 
 576:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC.c **** 
 578:Generated_Source\PSoC4/ADC.c **** 
 579:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC.c **** *
 583:Generated_Source\PSoC4/ADC.c **** * Summary:
 584:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC.c **** *
 586:Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC.c **** *
 589:Generated_Source\PSoC4/ADC.c **** * Return:
 590:Generated_Source\PSoC4/ADC.c **** *  None.
 591:Generated_Source\PSoC4/ADC.c **** *
 592:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC.c **** {
 701              		.loc 1 594 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 8
 704              		@ frame_needed = 1, uses_anonymous_args = 0
 705 0000 80B5     		push	{r7, lr}
 706              		.cfi_def_cfa_offset 8
 707              		.cfi_offset 7, -8
 708              		.cfi_offset 14, -4
 709 0002 82B0     		sub	sp, sp, #8
 710              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 24


 711 0004 00AF     		add	r7, sp, #0
 712              		.cfi_def_cfa_register 7
 713 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 714              		.loc 1 595 0
 715 0008 084B     		ldr	r3, .L50
 716 000a 084A     		ldr	r2, .L50
 717 000c 1268     		ldr	r2, [r2]
 718 000e 120C     		lsrs	r2, r2, #16
 719 0010 1204     		lsls	r2, r2, #16
 720 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 721              		.loc 1 596 0
 722 0014 054B     		ldr	r3, .L50
 723 0016 054A     		ldr	r2, .L50
 724 0018 1168     		ldr	r1, [r2]
 725 001a 7A68     		ldr	r2, [r7, #4]
 726 001c 1204     		lsls	r2, r2, #16
 727 001e 120C     		lsrs	r2, r2, #16
 728 0020 0A43     		orrs	r2, r1
 729 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/ADC.c **** }
 730              		.loc 1 597 0
 731 0024 C046     		nop
 732 0026 BD46     		mov	sp, r7
 733 0028 02B0     		add	sp, sp, #8
 734              		@ sp needed
 735 002a 80BD     		pop	{r7, pc}
 736              	.L51:
 737              		.align	2
 738              	.L50:
 739 002c 18003A40 		.word	1077542936
 740              		.cfi_endproc
 741              	.LFE11:
 742              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 743              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 744              		.align	2
 745              		.global	ADC_SetHighLimit
 746              		.code	16
 747              		.thumb_func
 748              		.type	ADC_SetHighLimit, %function
 749              	ADC_SetHighLimit:
 750              	.LFB12:
 598:Generated_Source\PSoC4/ADC.c **** 
 599:Generated_Source\PSoC4/ADC.c **** 
 600:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC.c **** *
 604:Generated_Source\PSoC4/ADC.c **** * Summary:
 605:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC.c **** *
 607:Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC.c **** *
 610:Generated_Source\PSoC4/ADC.c **** * Return:
 611:Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 25


 612:Generated_Source\PSoC4/ADC.c **** *
 613:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC.c **** {
 751              		.loc 1 615 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 8
 754              		@ frame_needed = 1, uses_anonymous_args = 0
 755 0000 80B5     		push	{r7, lr}
 756              		.cfi_def_cfa_offset 8
 757              		.cfi_offset 7, -8
 758              		.cfi_offset 14, -4
 759 0002 82B0     		sub	sp, sp, #8
 760              		.cfi_def_cfa_offset 16
 761 0004 00AF     		add	r7, sp, #0
 762              		.cfi_def_cfa_register 7
 763 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 764              		.loc 1 616 0
 765 0008 084B     		ldr	r3, .L53
 766 000a 084A     		ldr	r2, .L53
 767 000c 1268     		ldr	r2, [r2]
 768 000e 1204     		lsls	r2, r2, #16
 769 0010 120C     		lsrs	r2, r2, #16
 770 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 771              		.loc 1 617 0
 772 0014 054B     		ldr	r3, .L53
 773 0016 054A     		ldr	r2, .L53
 774 0018 1168     		ldr	r1, [r2]
 775 001a 7A68     		ldr	r2, [r7, #4]
 776 001c 1204     		lsls	r2, r2, #16
 777 001e 0A43     		orrs	r2, r1
 778 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/ADC.c **** }
 779              		.loc 1 618 0
 780 0022 C046     		nop
 781 0024 BD46     		mov	sp, r7
 782 0026 02B0     		add	sp, sp, #8
 783              		@ sp needed
 784 0028 80BD     		pop	{r7, pc}
 785              	.L54:
 786 002a C046     		.align	2
 787              	.L53:
 788 002c 18003A40 		.word	1077542936
 789              		.cfi_endproc
 790              	.LFE12:
 791              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 792              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 793              		.align	2
 794              		.global	ADC_SetLimitMask
 795              		.code	16
 796              		.thumb_func
 797              		.type	ADC_SetLimitMask, %function
 798              	ADC_SetLimitMask:
 799              	.LFB13:
 619:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 26


 620:Generated_Source\PSoC4/ADC.c **** 
 621:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Summary:
 626:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC.c **** *
 634:Generated_Source\PSoC4/ADC.c **** * Return:
 635:Generated_Source\PSoC4/ADC.c **** *  None.
 636:Generated_Source\PSoC4/ADC.c **** *
 637:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC.c **** {
 800              		.loc 1 639 0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 8
 803              		@ frame_needed = 1, uses_anonymous_args = 0
 804 0000 80B5     		push	{r7, lr}
 805              		.cfi_def_cfa_offset 8
 806              		.cfi_offset 7, -8
 807              		.cfi_offset 14, -4
 808 0002 82B0     		sub	sp, sp, #8
 809              		.cfi_def_cfa_offset 16
 810 0004 00AF     		add	r7, sp, #0
 811              		.cfi_def_cfa_register 7
 812 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 813              		.loc 1 640 0
 814 0008 044B     		ldr	r3, .L56
 815 000a 7A68     		ldr	r2, [r7, #4]
 816 000c 0121     		movs	r1, #1
 817 000e 0A40     		ands	r2, r1
 818 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/ADC.c **** }
 819              		.loc 1 641 0
 820 0012 C046     		nop
 821 0014 BD46     		mov	sp, r7
 822 0016 02B0     		add	sp, sp, #8
 823              		@ sp needed
 824 0018 80BD     		pop	{r7, pc}
 825              	.L57:
 826 001a C046     		.align	2
 827              	.L56:
 828 001c 38023A40 		.word	1077543480
 829              		.cfi_endproc
 830              	.LFE13:
 831              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 832              		.section	.text.ADC_SetSatMask,"ax",%progbits
 833              		.align	2
 834              		.global	ADC_SetSatMask
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 27


 835              		.code	16
 836              		.thumb_func
 837              		.type	ADC_SetSatMask, %function
 838              	ADC_SetSatMask:
 839              	.LFB14:
 642:Generated_Source\PSoC4/ADC.c **** 
 643:Generated_Source\PSoC4/ADC.c **** 
 644:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC.c **** *
 648:Generated_Source\PSoC4/ADC.c **** * Summary:
 649:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC.c **** *
 651:Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC.c **** *
 657:Generated_Source\PSoC4/ADC.c **** * Return:
 658:Generated_Source\PSoC4/ADC.c **** *  None.
 659:Generated_Source\PSoC4/ADC.c **** *
 660:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC.c **** {
 840              		.loc 1 662 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 8
 843              		@ frame_needed = 1, uses_anonymous_args = 0
 844 0000 80B5     		push	{r7, lr}
 845              		.cfi_def_cfa_offset 8
 846              		.cfi_offset 7, -8
 847              		.cfi_offset 14, -4
 848 0002 82B0     		sub	sp, sp, #8
 849              		.cfi_def_cfa_offset 16
 850 0004 00AF     		add	r7, sp, #0
 851              		.cfi_def_cfa_register 7
 852 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 853              		.loc 1 663 0
 854 0008 044B     		ldr	r3, .L59
 855 000a 7A68     		ldr	r2, [r7, #4]
 856 000c 0121     		movs	r1, #1
 857 000e 0A40     		ands	r2, r1
 858 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/ADC.c **** }
 859              		.loc 1 664 0
 860 0012 C046     		nop
 861 0014 BD46     		mov	sp, r7
 862 0016 02B0     		add	sp, sp, #8
 863              		@ sp needed
 864 0018 80BD     		pop	{r7, pc}
 865              	.L60:
 866 001a C046     		.align	2
 867              	.L59:
 868 001c 28023A40 		.word	1077543464
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 28


 869              		.cfi_endproc
 870              	.LFE14:
 871              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 872              		.section	.text.ADC_SetOffset,"ax",%progbits
 873              		.align	2
 874              		.global	ADC_SetOffset
 875              		.code	16
 876              		.thumb_func
 877              		.type	ADC_SetOffset, %function
 878              	ADC_SetOffset:
 879              	.LFB15:
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** 
 667:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC.c **** *
 671:Generated_Source\PSoC4/ADC.c **** * Summary:
 672:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC.c **** *
 677:Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC.c **** *
 682:Generated_Source\PSoC4/ADC.c **** * Return:
 683:Generated_Source\PSoC4/ADC.c **** *  None.
 684:Generated_Source\PSoC4/ADC.c **** *
 685:Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC.c **** *
 688:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC.c **** {
 880              		.loc 1 690 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 8
 883              		@ frame_needed = 1, uses_anonymous_args = 0
 884 0000 80B5     		push	{r7, lr}
 885              		.cfi_def_cfa_offset 8
 886              		.cfi_offset 7, -8
 887              		.cfi_offset 14, -4
 888 0002 82B0     		sub	sp, sp, #8
 889              		.cfi_def_cfa_offset 16
 890 0004 00AF     		add	r7, sp, #0
 891              		.cfi_def_cfa_register 7
 892 0006 7860     		str	r0, [r7, #4]
 893 0008 0A00     		movs	r2, r1
 894 000a BB1C     		adds	r3, r7, #2
 895 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 896              		.loc 1 692 0
 897 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 29


 898 0010 002B     		cmp	r3, #0
 899 0012 02D0     		beq	.L62
 900              		.loc 1 692 0 is_stmt 0 discriminator 1
 901 0014 0020     		movs	r0, #0
 902 0016 FFF7FEFF 		bl	CyHalt
 903              	.L62:
 693:Generated_Source\PSoC4/ADC.c **** 
 694:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 904              		.loc 1 694 0 is_stmt 1
 905 001a 054B     		ldr	r3, .L63
 906 001c 7A68     		ldr	r2, [r7, #4]
 907 001e 5200     		lsls	r2, r2, #1
 908 0020 B91C     		adds	r1, r7, #2
 909 0022 0988     		ldrh	r1, [r1]
 910 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/ADC.c **** }
 911              		.loc 1 695 0
 912 0026 C046     		nop
 913 0028 BD46     		mov	sp, r7
 914 002a 02B0     		add	sp, sp, #8
 915              		@ sp needed
 916 002c 80BD     		pop	{r7, pc}
 917              	.L64:
 918 002e C046     		.align	2
 919              	.L63:
 920 0030 00000000 		.word	ADC_offset
 921              		.cfi_endproc
 922              	.LFE15:
 923              		.size	ADC_SetOffset, .-ADC_SetOffset
 924              		.section	.text.ADC_SetGain,"ax",%progbits
 925              		.align	2
 926              		.global	ADC_SetGain
 927              		.code	16
 928              		.thumb_func
 929              		.type	ADC_SetGain, %function
 930              	ADC_SetGain:
 931              	.LFB16:
 696:Generated_Source\PSoC4/ADC.c **** 
 697:Generated_Source\PSoC4/ADC.c **** 
 698:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC.c **** *
 702:Generated_Source\PSoC4/ADC.c **** * Summary:
 703:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC.c **** *
 711:Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC.c **** *
 715:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 30


 716:Generated_Source\PSoC4/ADC.c **** *  None.
 717:Generated_Source\PSoC4/ADC.c **** *
 718:Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC.c **** *
 722:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC.c **** {
 932              		.loc 1 724 0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 8
 935              		@ frame_needed = 1, uses_anonymous_args = 0
 936 0000 80B5     		push	{r7, lr}
 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 7, -8
 939              		.cfi_offset 14, -4
 940 0002 82B0     		sub	sp, sp, #8
 941              		.cfi_def_cfa_offset 16
 942 0004 00AF     		add	r7, sp, #0
 943              		.cfi_def_cfa_register 7
 944 0006 7860     		str	r0, [r7, #4]
 945 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 946              		.loc 1 726 0
 947 000a 7B68     		ldr	r3, [r7, #4]
 948 000c 002B     		cmp	r3, #0
 949 000e 02D0     		beq	.L66
 950              		.loc 1 726 0 is_stmt 0 discriminator 1
 951 0010 0020     		movs	r0, #0
 952 0012 FFF7FEFF 		bl	CyHalt
 953              	.L66:
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 954              		.loc 1 728 0 is_stmt 1
 955 0016 044B     		ldr	r3, .L67
 956 0018 7A68     		ldr	r2, [r7, #4]
 957 001a 9200     		lsls	r2, r2, #2
 958 001c 3968     		ldr	r1, [r7]
 959 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/ADC.c **** }
 960              		.loc 1 729 0
 961 0020 C046     		nop
 962 0022 BD46     		mov	sp, r7
 963 0024 02B0     		add	sp, sp, #8
 964              		@ sp needed
 965 0026 80BD     		pop	{r7, pc}
 966              	.L68:
 967              		.align	2
 968              	.L67:
 969 0028 00000000 		.word	ADC_countsPer10Volt
 970              		.cfi_endproc
 971              	.LFE16:
 972              		.size	ADC_SetGain, .-ADC_SetGain
 973              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 974              		.align	2
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 31


 975              		.global	ADC_CountsTo_mVolts
 976              		.code	16
 977              		.thumb_func
 978              		.type	ADC_CountsTo_mVolts, %function
 979              	ADC_CountsTo_mVolts:
 980              	.LFB17:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c **** 
 732:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:Generated_Source\PSoC4/ADC.c **** 
 734:Generated_Source\PSoC4/ADC.c **** 
 735:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC.c ****     *
 739:Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC.c ****     *
 743:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC.c ****     *
 747:Generated_Source\PSoC4/ADC.c ****     * Return:
 748:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC.c ****     *
 750:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC.c ****     *
 755:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC.c ****     {
 981              		.loc 1 757 0
 982              		.cfi_startproc
 983              		@ args = 0, pretend = 0, frame = 16
 984              		@ frame_needed = 1, uses_anonymous_args = 0
 985 0000 80B5     		push	{r7, lr}
 986              		.cfi_def_cfa_offset 8
 987              		.cfi_offset 7, -8
 988              		.cfi_offset 14, -4
 989 0002 84B0     		sub	sp, sp, #16
 990              		.cfi_def_cfa_offset 24
 991 0004 00AF     		add	r7, sp, #0
 992              		.cfi_def_cfa_register 7
 993 0006 7860     		str	r0, [r7, #4]
 994 0008 0A00     		movs	r2, r1
 995 000a BB1C     		adds	r3, r7, #2
 996 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC.c **** 
 760:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 997              		.loc 1 761 0
 998 000e 7B68     		ldr	r3, [r7, #4]
 999 0010 002B     		cmp	r3, #0
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 32


 1000 0012 02D0     		beq	.L70
 1001              		.loc 1 761 0 is_stmt 0 discriminator 1
 1002 0014 0020     		movs	r0, #0
 1003 0016 FFF7FEFF 		bl	CyHalt
 1004              	.L70:
 762:Generated_Source\PSoC4/ADC.c **** 
 763:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/ADC.c ****             {
 767:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC.c ****             }
 769:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC.c **** 
 771:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1005              		.loc 1 772 0 is_stmt 1
 1006 001a 1E4B     		ldr	r3, .L76
 1007 001c 7A68     		ldr	r2, [r7, #4]
 1008 001e 5200     		lsls	r2, r2, #1
 1009 0020 D35A     		ldrh	r3, [r2, r3]
 1010 0022 19B2     		sxth	r1, r3
 1011 0024 BB1C     		adds	r3, r7, #2
 1012 0026 1A88     		ldrh	r2, [r3]
 1013 0028 8BB2     		uxth	r3, r1
 1014 002a D31A     		subs	r3, r2, r3
 1015 002c 9AB2     		uxth	r2, r3
 1016 002e BB1C     		adds	r3, r7, #2
 1017 0030 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/ADC.c **** 
 774:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1018              		.loc 1 774 0
 1019 0032 BB1C     		adds	r3, r7, #2
 1020 0034 0022     		movs	r2, #0
 1021 0036 9B5E     		ldrsh	r3, [r3, r2]
 1022 0038 174A     		ldr	r2, .L76+4
 1023 003a 5A43     		muls	r2, r3
 775:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1024              		.loc 1 775 0
 1025 003c BB1C     		adds	r3, r7, #2
 1026 003e 0021     		movs	r1, #0
 1027 0040 5B5E     		ldrsh	r3, [r3, r1]
 1028 0042 002B     		cmp	r3, #0
 1029 0044 08DD     		ble	.L71
 1030              		.loc 1 775 0 is_stmt 0 discriminator 1
 1031 0046 154B     		ldr	r3, .L76+8
 1032 0048 7968     		ldr	r1, [r7, #4]
 1033 004a 8900     		lsls	r1, r1, #2
 1034 004c CB58     		ldr	r3, [r1, r3]
 1035 004e 002B     		cmp	r3, #0
 1036 0050 00DA     		bge	.L72
 1037 0052 0133     		adds	r3, r3, #1
 1038              	.L72:
 1039 0054 5B10     		asrs	r3, r3, #1
 1040 0056 08E0     		b	.L73
 1041              	.L71:
 1042              		.loc 1 775 0 discriminator 2
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 33


 1043 0058 104B     		ldr	r3, .L76+8
 1044 005a 7968     		ldr	r1, [r7, #4]
 1045 005c 8900     		lsls	r1, r1, #2
 1046 005e CB58     		ldr	r3, [r1, r3]
 1047 0060 002B     		cmp	r3, #0
 1048 0062 00DA     		bge	.L74
 1049 0064 0133     		adds	r3, r3, #1
 1050              	.L74:
 1051 0066 5B10     		asrs	r3, r3, #1
 1052 0068 5B42     		rsbs	r3, r3, #0
 1053              	.L73:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1054              		.loc 1 774 0 is_stmt 1
 1055 006a D018     		adds	r0, r2, r3
 776:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1056              		.loc 1 776 0
 1057 006c 0B4B     		ldr	r3, .L76+8
 1058 006e 7A68     		ldr	r2, [r7, #4]
 1059 0070 9200     		lsls	r2, r2, #2
 1060 0072 D358     		ldr	r3, [r2, r3]
 1061 0074 1900     		movs	r1, r3
 1062 0076 FFF7FEFF 		bl	__aeabi_idiv
 1063 007a 0300     		movs	r3, r0
 1064 007c 1A00     		movs	r2, r3
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1065              		.loc 1 774 0
 1066 007e 0E23     		movs	r3, #14
 1067 0080 FB18     		adds	r3, r7, r3
 1068 0082 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/ADC.c **** 
 778:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1069              		.loc 1 778 0
 1070 0084 0E23     		movs	r3, #14
 1071 0086 FB18     		adds	r3, r7, r3
 1072 0088 0022     		movs	r2, #0
 1073 008a 9B5E     		ldrsh	r3, [r3, r2]
 779:Generated_Source\PSoC4/ADC.c ****     }
 1074              		.loc 1 779 0
 1075 008c 1800     		movs	r0, r3
 1076 008e BD46     		mov	sp, r7
 1077 0090 04B0     		add	sp, sp, #16
 1078              		@ sp needed
 1079 0092 80BD     		pop	{r7, pc}
 1080              	.L77:
 1081              		.align	2
 1082              	.L76:
 1083 0094 00000000 		.word	ADC_offset
 1084 0098 10270000 		.word	10000
 1085 009c 00000000 		.word	ADC_countsPer10Volt
 1086              		.cfi_endproc
 1087              	.LFE17:
 1088              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1089              		.global	__aeabi_lmul
 1090              		.global	__aeabi_ldivmod
 1091              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1092              		.align	2
 1093              		.global	ADC_CountsTo_uVolts
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 34


 1094              		.code	16
 1095              		.thumb_func
 1096              		.type	ADC_CountsTo_uVolts, %function
 1097              	ADC_CountsTo_uVolts:
 1098              	.LFB18:
 780:Generated_Source\PSoC4/ADC.c **** 
 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC.c ****     *
 786:Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC.c ****     *
 790:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC.c ****     *
 794:Generated_Source\PSoC4/ADC.c ****     * Return:
 795:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC.c ****     *
 797:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC.c ****     *
 802:Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC.c ****     *
 809:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC.c ****     {
 1099              		.loc 1 811 0
 1100              		.cfi_startproc
 1101              		@ args = 0, pretend = 0, frame = 24
 1102              		@ frame_needed = 1, uses_anonymous_args = 0
 1103 0000 B0B5     		push	{r4, r5, r7, lr}
 1104              		.cfi_def_cfa_offset 16
 1105              		.cfi_offset 4, -16
 1106              		.cfi_offset 5, -12
 1107              		.cfi_offset 7, -8
 1108              		.cfi_offset 14, -4
 1109 0002 86B0     		sub	sp, sp, #24
 1110              		.cfi_def_cfa_offset 40
 1111 0004 00AF     		add	r7, sp, #0
 1112              		.cfi_def_cfa_register 7
 1113 0006 F860     		str	r0, [r7, #12]
 1114 0008 0A00     		movs	r2, r1
 1115 000a 0A23     		movs	r3, #10
 1116 000c FB18     		adds	r3, r7, r3
 1117 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 35


 813:Generated_Source\PSoC4/ADC.c **** 
 814:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1118              		.loc 1 815 0
 1119 0010 FB68     		ldr	r3, [r7, #12]
 1120 0012 002B     		cmp	r3, #0
 1121 0014 02D0     		beq	.L79
 1122              		.loc 1 815 0 is_stmt 0 discriminator 1
 1123 0016 0020     		movs	r0, #0
 1124 0018 FFF7FEFF 		bl	CyHalt
 1125              	.L79:
 816:Generated_Source\PSoC4/ADC.c **** 
 817:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC.c ****             {
 821:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC.c ****             }
 823:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC.c **** 
 825:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1126              		.loc 1 826 0 is_stmt 1
 1127 001c 194B     		ldr	r3, .L81
 1128 001e FA68     		ldr	r2, [r7, #12]
 1129 0020 5200     		lsls	r2, r2, #1
 1130 0022 D35A     		ldrh	r3, [r2, r3]
 1131 0024 19B2     		sxth	r1, r3
 1132 0026 0A23     		movs	r3, #10
 1133 0028 FB18     		adds	r3, r7, r3
 1134 002a 1A88     		ldrh	r2, [r3]
 1135 002c 8BB2     		uxth	r3, r1
 1136 002e D31A     		subs	r3, r2, r3
 1137 0030 9AB2     		uxth	r2, r3
 1138 0032 0A23     		movs	r3, #10
 1139 0034 FB18     		adds	r3, r7, r3
 1140 0036 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/ADC.c **** 
 828:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1141              		.loc 1 828 0
 1142 0038 0A23     		movs	r3, #10
 1143 003a FB18     		adds	r3, r7, r3
 1144 003c 1B88     		ldrh	r3, [r3]
 1145 003e 1BB2     		sxth	r3, r3
 1146 0040 3B60     		str	r3, [r7]
 1147 0042 DB17     		asrs	r3, r3, #31
 1148 0044 7B60     		str	r3, [r7, #4]
 1149 0046 104A     		ldr	r2, .L81+4
 1150 0048 0023     		movs	r3, #0
 1151 004a 3868     		ldr	r0, [r7]
 1152 004c 7968     		ldr	r1, [r7, #4]
 1153 004e FFF7FEFF 		bl	__aeabi_lmul
 1154 0052 0200     		movs	r2, r0
 1155 0054 0B00     		movs	r3, r1
 1156 0056 1000     		movs	r0, r2
 1157 0058 1900     		movs	r1, r3
 1158 005a 0C4B     		ldr	r3, .L81+8
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 36


 1159 005c FA68     		ldr	r2, [r7, #12]
 1160 005e 9200     		lsls	r2, r2, #2
 1161 0060 D358     		ldr	r3, [r2, r3]
 1162 0062 1C00     		movs	r4, r3
 1163 0064 DB17     		asrs	r3, r3, #31
 1164 0066 1D00     		movs	r5, r3
 1165 0068 2200     		movs	r2, r4
 1166 006a 2B00     		movs	r3, r5
 1167 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1168 0070 0300     		movs	r3, r0
 1169 0072 0C00     		movs	r4, r1
 1170 0074 3B61     		str	r3, [r7, #16]
 1171 0076 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1172              		.loc 1 830 0
 1173 0078 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/ADC.c ****     }
 1174              		.loc 1 831 0
 1175 007a 1800     		movs	r0, r3
 1176 007c BD46     		mov	sp, r7
 1177 007e 06B0     		add	sp, sp, #24
 1178              		@ sp needed
 1179 0080 B0BD     		pop	{r4, r5, r7, pc}
 1180              	.L82:
 1181 0082 C046     		.align	2
 1182              	.L81:
 1183 0084 00000000 		.word	ADC_offset
 1184 0088 80969800 		.word	10000000
 1185 008c 00000000 		.word	ADC_countsPer10Volt
 1186              		.cfi_endproc
 1187              	.LFE18:
 1188              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1189              		.global	__aeabi_i2f
 1190              		.global	__aeabi_fmul
 1191              		.global	__aeabi_fdiv
 1192              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1193              		.align	2
 1194              		.global	ADC_CountsTo_Volts
 1195              		.code	16
 1196              		.thumb_func
 1197              		.type	ADC_CountsTo_Volts, %function
 1198              	ADC_CountsTo_Volts:
 1199              	.LFB19:
 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** 
 834:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC.c ****     *
 838:Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC.c ****     *
 842:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 37


 845:Generated_Source\PSoC4/ADC.c ****     *
 846:Generated_Source\PSoC4/ADC.c ****     * Return:
 847:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC.c ****     *
 849:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC.c ****     *
 854:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC.c ****     {
 1200              		.loc 1 856 0
 1201              		.cfi_startproc
 1202              		@ args = 0, pretend = 0, frame = 16
 1203              		@ frame_needed = 1, uses_anonymous_args = 0
 1204 0000 90B5     		push	{r4, r7, lr}
 1205              		.cfi_def_cfa_offset 12
 1206              		.cfi_offset 4, -12
 1207              		.cfi_offset 7, -8
 1208              		.cfi_offset 14, -4
 1209 0002 85B0     		sub	sp, sp, #20
 1210              		.cfi_def_cfa_offset 32
 1211 0004 00AF     		add	r7, sp, #0
 1212              		.cfi_def_cfa_register 7
 1213 0006 7860     		str	r0, [r7, #4]
 1214 0008 0A00     		movs	r2, r1
 1215 000a BB1C     		adds	r3, r7, #2
 1216 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC.c **** 
 859:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1217              		.loc 1 860 0
 1218 000e 7B68     		ldr	r3, [r7, #4]
 1219 0010 002B     		cmp	r3, #0
 1220 0012 02D0     		beq	.L84
 1221              		.loc 1 860 0 is_stmt 0 discriminator 1
 1222 0014 0020     		movs	r0, #0
 1223 0016 FFF7FEFF 		bl	CyHalt
 1224              	.L84:
 861:Generated_Source\PSoC4/ADC.c **** 
 862:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC.c ****             {
 866:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC.c ****             }
 868:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC.c **** 
 870:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1225              		.loc 1 871 0 is_stmt 1
 1226 001a 164B     		ldr	r3, .L86
 1227 001c 7A68     		ldr	r2, [r7, #4]
 1228 001e 5200     		lsls	r2, r2, #1
 1229 0020 D35A     		ldrh	r3, [r2, r3]
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 38


 1230 0022 19B2     		sxth	r1, r3
 1231 0024 BB1C     		adds	r3, r7, #2
 1232 0026 1A88     		ldrh	r2, [r3]
 1233 0028 8BB2     		uxth	r3, r1
 1234 002a D31A     		subs	r3, r2, r3
 1235 002c 9AB2     		uxth	r2, r3
 1236 002e BB1C     		adds	r3, r7, #2
 1237 0030 1A80     		strh	r2, [r3]
 872:Generated_Source\PSoC4/ADC.c **** 
 873:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1238              		.loc 1 873 0
 1239 0032 BB1C     		adds	r3, r7, #2
 1240 0034 0022     		movs	r2, #0
 1241 0036 9B5E     		ldrsh	r3, [r3, r2]
 1242 0038 1800     		movs	r0, r3
 1243 003a FFF7FEFF 		bl	__aeabi_i2f
 1244 003e 031C     		adds	r3, r0, #0
 1245 0040 0D49     		ldr	r1, .L86+4
 1246 0042 181C     		adds	r0, r3, #0
 1247 0044 FFF7FEFF 		bl	__aeabi_fmul
 1248 0048 031C     		adds	r3, r0, #0
 1249 004a 1C1C     		adds	r4, r3, #0
 1250 004c 0B4B     		ldr	r3, .L86+8
 1251 004e 7A68     		ldr	r2, [r7, #4]
 1252 0050 9200     		lsls	r2, r2, #2
 1253 0052 D358     		ldr	r3, [r2, r3]
 1254 0054 1800     		movs	r0, r3
 1255 0056 FFF7FEFF 		bl	__aeabi_i2f
 1256 005a 031C     		adds	r3, r0, #0
 1257 005c 191C     		adds	r1, r3, #0
 1258 005e 201C     		adds	r0, r4, #0
 1259 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1260 0064 031C     		adds	r3, r0, #0
 1261 0066 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/ADC.c **** 
 875:Generated_Source\PSoC4/ADC.c ****         return( volts );
 1262              		.loc 1 875 0
 1263 0068 FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/ADC.c ****     }
 1264              		.loc 1 876 0
 1265 006a 181C     		adds	r0, r3, #0
 1266 006c BD46     		mov	sp, r7
 1267 006e 05B0     		add	sp, sp, #20
 1268              		@ sp needed
 1269 0070 90BD     		pop	{r4, r7, pc}
 1270              	.L87:
 1271 0072 C046     		.align	2
 1272              	.L86:
 1273 0074 00000000 		.word	ADC_offset
 1274 0078 00002041 		.word	1092616192
 1275 007c 00000000 		.word	ADC_countsPer10Volt
 1276              		.cfi_endproc
 1277              	.LFE19:
 1278              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1279              		.text
 1280              	.Letext0:
 1281              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 39


 1282              		.section	.debug_info,"",%progbits
 1283              	.Ldebug_info0:
 1284 0000 8D040000 		.4byte	0x48d
 1285 0004 0400     		.2byte	0x4
 1286 0006 00000000 		.4byte	.Ldebug_abbrev0
 1287 000a 04       		.byte	0x4
 1288 000b 01       		.uleb128 0x1
 1289 000c 62010000 		.4byte	.LASF60
 1290 0010 0C       		.byte	0xc
 1291 0011 C1020000 		.4byte	.LASF61
 1292 0015 48020000 		.4byte	.LASF62
 1293 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1294 001d 00000000 		.4byte	0
 1295 0021 00000000 		.4byte	.Ldebug_line0
 1296 0025 02       		.uleb128 0x2
 1297 0026 01       		.byte	0x1
 1298 0027 06       		.byte	0x6
 1299 0028 68000000 		.4byte	.LASF0
 1300 002c 02       		.uleb128 0x2
 1301 002d 01       		.byte	0x1
 1302 002e 08       		.byte	0x8
 1303 002f 1E030000 		.4byte	.LASF1
 1304 0033 02       		.uleb128 0x2
 1305 0034 02       		.byte	0x2
 1306 0035 05       		.byte	0x5
 1307 0036 37030000 		.4byte	.LASF2
 1308 003a 02       		.uleb128 0x2
 1309 003b 02       		.byte	0x2
 1310 003c 07       		.byte	0x7
 1311 003d 3F010000 		.4byte	.LASF3
 1312 0041 02       		.uleb128 0x2
 1313 0042 04       		.byte	0x4
 1314 0043 05       		.byte	0x5
 1315 0044 8B000000 		.4byte	.LASF4
 1316 0048 02       		.uleb128 0x2
 1317 0049 04       		.byte	0x4
 1318 004a 07       		.byte	0x7
 1319 004b 0E010000 		.4byte	.LASF5
 1320 004f 02       		.uleb128 0x2
 1321 0050 08       		.byte	0x8
 1322 0051 05       		.byte	0x5
 1323 0052 5A000000 		.4byte	.LASF6
 1324 0056 02       		.uleb128 0x2
 1325 0057 08       		.byte	0x8
 1326 0058 07       		.byte	0x7
 1327 0059 32000000 		.4byte	.LASF7
 1328 005d 03       		.uleb128 0x3
 1329 005e 04       		.byte	0x4
 1330 005f 05       		.byte	0x5
 1331 0060 696E7400 		.ascii	"int\000"
 1332 0064 02       		.uleb128 0x2
 1333 0065 04       		.byte	0x4
 1334 0066 07       		.byte	0x7
 1335 0067 FA000000 		.4byte	.LASF8
 1336 006b 04       		.uleb128 0x4
 1337 006c BC000000 		.4byte	.LASF9
 1338 0070 02       		.byte	0x2
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 40


 1339 0071 D201     		.2byte	0x1d2
 1340 0073 2C000000 		.4byte	0x2c
 1341 0077 04       		.uleb128 0x4
 1342 0078 00000000 		.4byte	.LASF10
 1343 007c 02       		.byte	0x2
 1344 007d D301     		.2byte	0x1d3
 1345 007f 3A000000 		.4byte	0x3a
 1346 0083 04       		.uleb128 0x4
 1347 0084 C9000000 		.4byte	.LASF11
 1348 0088 02       		.byte	0x2
 1349 0089 D401     		.2byte	0x1d4
 1350 008b 48000000 		.4byte	0x48
 1351 008f 04       		.uleb128 0x4
 1352 0090 89030000 		.4byte	.LASF12
 1353 0094 02       		.byte	0x2
 1354 0095 D601     		.2byte	0x1d6
 1355 0097 33000000 		.4byte	0x33
 1356 009b 04       		.uleb128 0x4
 1357 009c 7B000000 		.4byte	.LASF13
 1358 00a0 02       		.byte	0x2
 1359 00a1 D701     		.2byte	0x1d7
 1360 00a3 41000000 		.4byte	0x41
 1361 00a7 04       		.uleb128 0x4
 1362 00a8 FD010000 		.4byte	.LASF14
 1363 00ac 02       		.byte	0x2
 1364 00ad D801     		.2byte	0x1d8
 1365 00af B3000000 		.4byte	0xb3
 1366 00b3 02       		.uleb128 0x2
 1367 00b4 04       		.byte	0x4
 1368 00b5 04       		.byte	0x4
 1369 00b6 EA020000 		.4byte	.LASF15
 1370 00ba 02       		.uleb128 0x2
 1371 00bb 08       		.byte	0x8
 1372 00bc 04       		.byte	0x4
 1373 00bd C2000000 		.4byte	.LASF16
 1374 00c1 04       		.uleb128 0x4
 1375 00c2 AB020000 		.4byte	.LASF17
 1376 00c6 02       		.byte	0x2
 1377 00c7 DD01     		.2byte	0x1dd
 1378 00c9 4F000000 		.4byte	0x4f
 1379 00cd 02       		.uleb128 0x2
 1380 00ce 01       		.byte	0x1
 1381 00cf 08       		.byte	0x8
 1382 00d0 55030000 		.4byte	.LASF18
 1383 00d4 04       		.uleb128 0x4
 1384 00d5 F7010000 		.4byte	.LASF19
 1385 00d9 02       		.byte	0x2
 1386 00da 7E02     		.2byte	0x27e
 1387 00dc E0000000 		.4byte	0xe0
 1388 00e0 05       		.uleb128 0x5
 1389 00e1 83000000 		.4byte	0x83
 1390 00e5 02       		.uleb128 0x2
 1391 00e6 08       		.byte	0x8
 1392 00e7 04       		.byte	0x4
 1393 00e8 17020000 		.4byte	.LASF20
 1394 00ec 02       		.uleb128 0x2
 1395 00ed 04       		.byte	0x4
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 41


 1396 00ee 07       		.byte	0x7
 1397 00ef 05020000 		.4byte	.LASF21
 1398 00f3 06       		.uleb128 0x6
 1399 00f4 81000000 		.4byte	.LASF25
 1400 00f8 01       		.byte	0x1
 1401 00f9 3F       		.byte	0x3f
 1402 00fa 00000000 		.4byte	.LFB2
 1403 00fe 24000000 		.4byte	.LFE2-.LFB2
 1404 0102 01       		.uleb128 0x1
 1405 0103 9C       		.byte	0x9c
 1406 0104 07       		.uleb128 0x7
 1407 0105 29000000 		.4byte	.LASF36
 1408 0109 01       		.byte	0x1
 1409 010a 5E       		.byte	0x5e
 1410 010b 00000000 		.4byte	.LFB3
 1411 010f E0010000 		.4byte	.LFE3-.LFB3
 1412 0113 01       		.uleb128 0x1
 1413 0114 9C       		.byte	0x9c
 1414 0115 44010000 		.4byte	0x144
 1415 0119 08       		.uleb128 0x8
 1416 011a 4A030000 		.4byte	.LASF22
 1417 011e 01       		.byte	0x1
 1418 011f 60       		.byte	0x60
 1419 0120 83000000 		.4byte	0x83
 1420 0124 02       		.uleb128 0x2
 1421 0125 91       		.byte	0x91
 1422 0126 74       		.sleb128 -12
 1423 0127 08       		.uleb128 0x8
 1424 0128 35010000 		.4byte	.LASF23
 1425 012c 01       		.byte	0x1
 1426 012d 61       		.byte	0x61
 1427 012e 83000000 		.4byte	0x83
 1428 0132 02       		.uleb128 0x2
 1429 0133 91       		.byte	0x91
 1430 0134 6C       		.sleb128 -20
 1431 0135 08       		.uleb128 0x8
 1432 0136 0F000000 		.4byte	.LASF24
 1433 013a 01       		.byte	0x1
 1434 013b 62       		.byte	0x62
 1435 013c 9B000000 		.4byte	0x9b
 1436 0140 02       		.uleb128 0x2
 1437 0141 91       		.byte	0x91
 1438 0142 70       		.sleb128 -16
 1439 0143 00       		.byte	0
 1440 0144 09       		.uleb128 0x9
 1441 0145 7E030000 		.4byte	.LASF26
 1442 0149 01       		.byte	0x1
 1443 014a 4A01     		.2byte	0x14a
 1444 014c 00000000 		.4byte	.LFB4
 1445 0150 38000000 		.4byte	.LFE4-.LFB4
 1446 0154 01       		.uleb128 0x1
 1447 0155 9C       		.byte	0x9c
 1448 0156 0A       		.uleb128 0xa
 1449 0157 41030000 		.4byte	.LASF27
 1450 015b 01       		.byte	0x1
 1451 015c 6D01     		.2byte	0x16d
 1452 015e 00000000 		.4byte	.LFB5
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 42


 1453 0162 1C000000 		.4byte	.LFE5-.LFB5
 1454 0166 01       		.uleb128 0x1
 1455 0167 9C       		.byte	0x9c
 1456 0168 0A       		.uleb128 0xa
 1457 0169 49000000 		.4byte	.LASF28
 1458 016d 01       		.byte	0x1
 1459 016e 8701     		.2byte	0x187
 1460 0170 00000000 		.4byte	.LFB6
 1461 0174 14000000 		.4byte	.LFE6-.LFB6
 1462 0178 01       		.uleb128 0x1
 1463 0179 9C       		.byte	0x9c
 1464 017a 0A       		.uleb128 0xa
 1465 017b 52010000 		.4byte	.LASF29
 1466 017f 01       		.byte	0x1
 1467 0180 A001     		.2byte	0x1a0
 1468 0182 00000000 		.4byte	.LFB7
 1469 0186 0A000000 		.4byte	.LFE7-.LFB7
 1470 018a 01       		.uleb128 0x1
 1471 018b 9C       		.byte	0x9c
 1472 018c 0B       		.uleb128 0xb
 1473 018d 34020000 		.4byte	.LASF31
 1474 0191 01       		.byte	0x1
 1475 0192 C201     		.2byte	0x1c2
 1476 0194 83000000 		.4byte	0x83
 1477 0198 00000000 		.4byte	.LFB8
 1478 019c 48000000 		.4byte	.LFE8-.LFB8
 1479 01a0 01       		.uleb128 0x1
 1480 01a1 9C       		.byte	0x9c
 1481 01a2 C5010000 		.4byte	0x1c5
 1482 01a6 0C       		.uleb128 0xc
 1483 01a7 E1000000 		.4byte	.LASF33
 1484 01ab 01       		.byte	0x1
 1485 01ac C201     		.2byte	0x1c2
 1486 01ae 83000000 		.4byte	0x83
 1487 01b2 02       		.uleb128 0x2
 1488 01b3 91       		.byte	0x91
 1489 01b4 6C       		.sleb128 -20
 1490 01b5 0D       		.uleb128 0xd
 1491 01b6 74000000 		.4byte	.LASF30
 1492 01ba 01       		.byte	0x1
 1493 01bb C401     		.2byte	0x1c4
 1494 01bd 83000000 		.4byte	0x83
 1495 01c1 02       		.uleb128 0x2
 1496 01c2 91       		.byte	0x91
 1497 01c3 74       		.sleb128 -12
 1498 01c4 00       		.byte	0
 1499 01c5 0E       		.uleb128 0xe
 1500 01c6 A4030000 		.4byte	.LASF32
 1501 01ca 01       		.byte	0x1
 1502 01cb F801     		.2byte	0x1f8
 1503 01cd 8F000000 		.4byte	0x8f
 1504 01d1 00000000 		.4byte	.LFB9
 1505 01d5 44000000 		.4byte	.LFE9-.LFB9
 1506 01d9 01       		.uleb128 0x1
 1507 01da 9C       		.byte	0x9c
 1508 01db FE010000 		.4byte	0x1fe
 1509 01df 0C       		.uleb128 0xc
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 43


 1510 01e0 50030000 		.4byte	.LASF34
 1511 01e4 01       		.byte	0x1
 1512 01e5 F801     		.2byte	0x1f8
 1513 01e7 83000000 		.4byte	0x83
 1514 01eb 02       		.uleb128 0x2
 1515 01ec 91       		.byte	0x91
 1516 01ed 6C       		.sleb128 -20
 1517 01ee 0D       		.uleb128 0xd
 1518 01ef 9D030000 		.4byte	.LASF35
 1519 01f3 01       		.byte	0x1
 1520 01f4 FA01     		.2byte	0x1fa
 1521 01f6 83000000 		.4byte	0x83
 1522 01fa 02       		.uleb128 0x2
 1523 01fb 91       		.byte	0x91
 1524 01fc 74       		.sleb128 -12
 1525 01fd 00       		.byte	0
 1526 01fe 0F       		.uleb128 0xf
 1527 01ff B1020000 		.4byte	.LASF37
 1528 0203 01       		.byte	0x1
 1529 0204 2502     		.2byte	0x225
 1530 0206 00000000 		.4byte	.LFB10
 1531 020a 20000000 		.4byte	.LFE10-.LFB10
 1532 020e 01       		.uleb128 0x1
 1533 020f 9C       		.byte	0x9c
 1534 0210 24020000 		.4byte	0x224
 1535 0214 0C       		.uleb128 0xc
 1536 0215 D0000000 		.4byte	.LASF38
 1537 0219 01       		.byte	0x1
 1538 021a 2502     		.2byte	0x225
 1539 021c 83000000 		.4byte	0x83
 1540 0220 02       		.uleb128 0x2
 1541 0221 91       		.byte	0x91
 1542 0222 74       		.sleb128 -12
 1543 0223 00       		.byte	0
 1544 0224 0F       		.uleb128 0xf
 1545 0225 0E030000 		.4byte	.LASF39
 1546 0229 01       		.byte	0x1
 1547 022a 5102     		.2byte	0x251
 1548 022c 00000000 		.4byte	.LFB11
 1549 0230 30000000 		.4byte	.LFE11-.LFB11
 1550 0234 01       		.uleb128 0x1
 1551 0235 9C       		.byte	0x9c
 1552 0236 4A020000 		.4byte	0x24a
 1553 023a 0C       		.uleb128 0xc
 1554 023b 0E020000 		.4byte	.LASF40
 1555 023f 01       		.byte	0x1
 1556 0240 5102     		.2byte	0x251
 1557 0242 83000000 		.4byte	0x83
 1558 0246 02       		.uleb128 0x2
 1559 0247 91       		.byte	0x91
 1560 0248 74       		.sleb128 -12
 1561 0249 00       		.byte	0
 1562 024a 0F       		.uleb128 0xf
 1563 024b 23020000 		.4byte	.LASF41
 1564 024f 01       		.byte	0x1
 1565 0250 6602     		.2byte	0x266
 1566 0252 00000000 		.4byte	.LFB12
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 44


 1567 0256 30000000 		.4byte	.LFE12-.LFB12
 1568 025a 01       		.uleb128 0x1
 1569 025b 9C       		.byte	0x9c
 1570 025c 70020000 		.4byte	0x270
 1571 0260 0C       		.uleb128 0xc
 1572 0261 F0020000 		.4byte	.LASF42
 1573 0265 01       		.byte	0x1
 1574 0266 6602     		.2byte	0x266
 1575 0268 83000000 		.4byte	0x83
 1576 026c 02       		.uleb128 0x2
 1577 026d 91       		.byte	0x91
 1578 026e 74       		.sleb128 -12
 1579 026f 00       		.byte	0
 1580 0270 0F       		.uleb128 0xf
 1581 0271 E9000000 		.4byte	.LASF43
 1582 0275 01       		.byte	0x1
 1583 0276 7E02     		.2byte	0x27e
 1584 0278 00000000 		.4byte	.LFB13
 1585 027c 20000000 		.4byte	.LFE13-.LFB13
 1586 0280 01       		.uleb128 0x1
 1587 0281 9C       		.byte	0x9c
 1588 0282 96020000 		.4byte	0x296
 1589 0286 0C       		.uleb128 0xc
 1590 0287 D0000000 		.4byte	.LASF38
 1591 028b 01       		.byte	0x1
 1592 028c 7E02     		.2byte	0x27e
 1593 028e 83000000 		.4byte	0x83
 1594 0292 02       		.uleb128 0x2
 1595 0293 91       		.byte	0x91
 1596 0294 74       		.sleb128 -12
 1597 0295 00       		.byte	0
 1598 0296 0F       		.uleb128 0xf
 1599 0297 20010000 		.4byte	.LASF44
 1600 029b 01       		.byte	0x1
 1601 029c 9502     		.2byte	0x295
 1602 029e 00000000 		.4byte	.LFB14
 1603 02a2 20000000 		.4byte	.LFE14-.LFB14
 1604 02a6 01       		.uleb128 0x1
 1605 02a7 9C       		.byte	0x9c
 1606 02a8 BC020000 		.4byte	0x2bc
 1607 02ac 0C       		.uleb128 0xc
 1608 02ad D0000000 		.4byte	.LASF38
 1609 02b1 01       		.byte	0x1
 1610 02b2 9502     		.2byte	0x295
 1611 02b4 83000000 		.4byte	0x83
 1612 02b8 02       		.uleb128 0x2
 1613 02b9 91       		.byte	0x91
 1614 02ba 74       		.sleb128 -12
 1615 02bb 00       		.byte	0
 1616 02bc 10       		.uleb128 0x10
 1617 02bd 8F030000 		.4byte	.LASF45
 1618 02c1 01       		.byte	0x1
 1619 02c2 B102     		.2byte	0x2b1
 1620 02c4 00000000 		.4byte	.LFB15
 1621 02c8 34000000 		.4byte	.LFE15-.LFB15
 1622 02cc 01       		.uleb128 0x1
 1623 02cd 9C       		.byte	0x9c
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 45


 1624 02ce F1020000 		.4byte	0x2f1
 1625 02d2 0C       		.uleb128 0xc
 1626 02d3 50030000 		.4byte	.LASF34
 1627 02d7 01       		.byte	0x1
 1628 02d8 B102     		.2byte	0x2b1
 1629 02da 83000000 		.4byte	0x83
 1630 02de 02       		.uleb128 0x2
 1631 02df 91       		.byte	0x91
 1632 02e0 74       		.sleb128 -12
 1633 02e1 0C       		.uleb128 0xc
 1634 02e2 6D030000 		.4byte	.LASF46
 1635 02e6 01       		.byte	0x1
 1636 02e7 B102     		.2byte	0x2b1
 1637 02e9 8F000000 		.4byte	0x8f
 1638 02ed 02       		.uleb128 0x2
 1639 02ee 91       		.byte	0x91
 1640 02ef 72       		.sleb128 -14
 1641 02f0 00       		.byte	0
 1642 02f1 10       		.uleb128 0x10
 1643 02f2 DE020000 		.4byte	.LASF47
 1644 02f6 01       		.byte	0x1
 1645 02f7 D302     		.2byte	0x2d3
 1646 02f9 00000000 		.4byte	.LFB16
 1647 02fd 2C000000 		.4byte	.LFE16-.LFB16
 1648 0301 01       		.uleb128 0x1
 1649 0302 9C       		.byte	0x9c
 1650 0303 26030000 		.4byte	0x326
 1651 0307 0C       		.uleb128 0xc
 1652 0308 50030000 		.4byte	.LASF34
 1653 030c 01       		.byte	0x1
 1654 030d D302     		.2byte	0x2d3
 1655 030f 83000000 		.4byte	0x83
 1656 0313 02       		.uleb128 0x2
 1657 0314 91       		.byte	0x91
 1658 0315 74       		.sleb128 -12
 1659 0316 0C       		.uleb128 0xc
 1660 0317 07000000 		.4byte	.LASF48
 1661 031b 01       		.byte	0x1
 1662 031c D302     		.2byte	0x2d3
 1663 031e 9B000000 		.4byte	0x9b
 1664 0322 02       		.uleb128 0x2
 1665 0323 91       		.byte	0x91
 1666 0324 70       		.sleb128 -16
 1667 0325 00       		.byte	0
 1668 0326 0E       		.uleb128 0xe
 1669 0327 FA020000 		.4byte	.LASF49
 1670 032b 01       		.byte	0x1
 1671 032c F402     		.2byte	0x2f4
 1672 032e 8F000000 		.4byte	0x8f
 1673 0332 00000000 		.4byte	.LFB17
 1674 0336 A0000000 		.4byte	.LFE17-.LFB17
 1675 033a 01       		.uleb128 0x1
 1676 033b 9C       		.byte	0x9c
 1677 033c 6E030000 		.4byte	0x36e
 1678 0340 0C       		.uleb128 0xc
 1679 0341 50030000 		.4byte	.LASF34
 1680 0345 01       		.byte	0x1
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 46


 1681 0346 F402     		.2byte	0x2f4
 1682 0348 83000000 		.4byte	0x83
 1683 034c 02       		.uleb128 0x2
 1684 034d 91       		.byte	0x91
 1685 034e 6C       		.sleb128 -20
 1686 034f 0C       		.uleb128 0xc
 1687 0350 74030000 		.4byte	.LASF50
 1688 0354 01       		.byte	0x1
 1689 0355 F402     		.2byte	0x2f4
 1690 0357 8F000000 		.4byte	0x8f
 1691 035b 02       		.uleb128 0x2
 1692 035c 91       		.byte	0x91
 1693 035d 6A       		.sleb128 -22
 1694 035e 0D       		.uleb128 0xd
 1695 035f F0010000 		.4byte	.LASF51
 1696 0363 01       		.byte	0x1
 1697 0364 F602     		.2byte	0x2f6
 1698 0366 8F000000 		.4byte	0x8f
 1699 036a 02       		.uleb128 0x2
 1700 036b 91       		.byte	0x91
 1701 036c 76       		.sleb128 -10
 1702 036d 00       		.byte	0
 1703 036e 0E       		.uleb128 0xe
 1704 036f 94000000 		.4byte	.LASF52
 1705 0373 01       		.byte	0x1
 1706 0374 2A03     		.2byte	0x32a
 1707 0376 9B000000 		.4byte	0x9b
 1708 037a 00000000 		.4byte	.LFB18
 1709 037e 90000000 		.4byte	.LFE18-.LFB18
 1710 0382 01       		.uleb128 0x1
 1711 0383 9C       		.byte	0x9c
 1712 0384 B6030000 		.4byte	0x3b6
 1713 0388 0C       		.uleb128 0xc
 1714 0389 50030000 		.4byte	.LASF34
 1715 038d 01       		.byte	0x1
 1716 038e 2A03     		.2byte	0x32a
 1717 0390 83000000 		.4byte	0x83
 1718 0394 02       		.uleb128 0x2
 1719 0395 91       		.byte	0x91
 1720 0396 64       		.sleb128 -28
 1721 0397 0C       		.uleb128 0xc
 1722 0398 74030000 		.4byte	.LASF50
 1723 039c 01       		.byte	0x1
 1724 039d 2A03     		.2byte	0x32a
 1725 039f 8F000000 		.4byte	0x8f
 1726 03a3 02       		.uleb128 0x2
 1727 03a4 91       		.byte	0x91
 1728 03a5 62       		.sleb128 -30
 1729 03a6 0D       		.uleb128 0xd
 1730 03a7 07010000 		.4byte	.LASF53
 1731 03ab 01       		.byte	0x1
 1732 03ac 2C03     		.2byte	0x32c
 1733 03ae C1000000 		.4byte	0xc1
 1734 03b2 02       		.uleb128 0x2
 1735 03b3 91       		.byte	0x91
 1736 03b4 68       		.sleb128 -24
 1737 03b5 00       		.byte	0
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 47


 1738 03b6 0E       		.uleb128 0xe
 1739 03b7 16000000 		.4byte	.LASF54
 1740 03bb 01       		.byte	0x1
 1741 03bc 5703     		.2byte	0x357
 1742 03be A7000000 		.4byte	0xa7
 1743 03c2 00000000 		.4byte	.LFB19
 1744 03c6 80000000 		.4byte	.LFE19-.LFB19
 1745 03ca 01       		.uleb128 0x1
 1746 03cb 9C       		.byte	0x9c
 1747 03cc FE030000 		.4byte	0x3fe
 1748 03d0 0C       		.uleb128 0xc
 1749 03d1 50030000 		.4byte	.LASF34
 1750 03d5 01       		.byte	0x1
 1751 03d6 5703     		.2byte	0x357
 1752 03d8 83000000 		.4byte	0x83
 1753 03dc 02       		.uleb128 0x2
 1754 03dd 91       		.byte	0x91
 1755 03de 64       		.sleb128 -28
 1756 03df 0C       		.uleb128 0xc
 1757 03e0 74030000 		.4byte	.LASF50
 1758 03e4 01       		.byte	0x1
 1759 03e5 5703     		.2byte	0x357
 1760 03e7 8F000000 		.4byte	0x8f
 1761 03eb 02       		.uleb128 0x2
 1762 03ec 91       		.byte	0x91
 1763 03ed 62       		.sleb128 -30
 1764 03ee 0D       		.uleb128 0xd
 1765 03ef 2F010000 		.4byte	.LASF55
 1766 03f3 01       		.byte	0x1
 1767 03f4 5903     		.2byte	0x359
 1768 03f6 A7000000 		.4byte	0xa7
 1769 03fa 02       		.uleb128 0x2
 1770 03fb 91       		.byte	0x91
 1771 03fc 6C       		.sleb128 -20
 1772 03fd 00       		.byte	0
 1773 03fe 11       		.uleb128 0x11
 1774 03ff 0E040000 		.4byte	0x40e
 1775 0403 0E040000 		.4byte	0x40e
 1776 0407 12       		.uleb128 0x12
 1777 0408 EC000000 		.4byte	0xec
 1778 040c 00       		.byte	0
 1779 040d 00       		.byte	0
 1780 040e 13       		.uleb128 0x13
 1781 040f 83000000 		.4byte	0x83
 1782 0413 08       		.uleb128 0x8
 1783 0414 5A030000 		.4byte	.LASF56
 1784 0418 01       		.byte	0x1
 1785 0419 21       		.byte	0x21
 1786 041a 24040000 		.4byte	0x424
 1787 041e 05       		.uleb128 0x5
 1788 041f 03       		.byte	0x3
 1789 0420 00000000 		.4byte	ADC_channelsConfig
 1790 0424 13       		.uleb128 0x13
 1791 0425 FE030000 		.4byte	0x3fe
 1792 0429 14       		.uleb128 0x14
 1793 042a D5000000 		.4byte	.LASF57
 1794 042e 01       		.byte	0x1
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 48


 1795 042f 18       		.byte	0x18
 1796 0430 6B000000 		.4byte	0x6b
 1797 0434 05       		.uleb128 0x5
 1798 0435 03       		.byte	0x3
 1799 0436 00000000 		.4byte	ADC_initVar
 1800 043a 11       		.uleb128 0x11
 1801 043b 4A040000 		.4byte	0x44a
 1802 043f 4A040000 		.4byte	0x44a
 1803 0443 12       		.uleb128 0x12
 1804 0444 EC000000 		.4byte	0xec
 1805 0448 00       		.byte	0
 1806 0449 00       		.byte	0
 1807 044a 05       		.uleb128 0x5
 1808 044b 8F000000 		.4byte	0x8f
 1809 044f 14       		.uleb128 0x14
 1810 0450 2C030000 		.4byte	.LASF58
 1811 0454 01       		.byte	0x1
 1812 0455 19       		.byte	0x19
 1813 0456 60040000 		.4byte	0x460
 1814 045a 05       		.uleb128 0x5
 1815 045b 03       		.byte	0x3
 1816 045c 00000000 		.4byte	ADC_offset
 1817 0460 05       		.uleb128 0x5
 1818 0461 3A040000 		.4byte	0x43a
 1819 0465 11       		.uleb128 0x11
 1820 0466 75040000 		.4byte	0x475
 1821 046a 75040000 		.4byte	0x475
 1822 046e 12       		.uleb128 0x12
 1823 046f EC000000 		.4byte	0xec
 1824 0473 00       		.byte	0
 1825 0474 00       		.byte	0
 1826 0475 05       		.uleb128 0x5
 1827 0476 9B000000 		.4byte	0x9b
 1828 047a 14       		.uleb128 0x14
 1829 047b A8000000 		.4byte	.LASF59
 1830 047f 01       		.byte	0x1
 1831 0480 1A       		.byte	0x1a
 1832 0481 8B040000 		.4byte	0x48b
 1833 0485 05       		.uleb128 0x5
 1834 0486 03       		.byte	0x3
 1835 0487 00000000 		.4byte	ADC_countsPer10Volt
 1836 048b 05       		.uleb128 0x5
 1837 048c 65040000 		.4byte	0x465
 1838 0490 00       		.byte	0
 1839              		.section	.debug_abbrev,"",%progbits
 1840              	.Ldebug_abbrev0:
 1841 0000 01       		.uleb128 0x1
 1842 0001 11       		.uleb128 0x11
 1843 0002 01       		.byte	0x1
 1844 0003 25       		.uleb128 0x25
 1845 0004 0E       		.uleb128 0xe
 1846 0005 13       		.uleb128 0x13
 1847 0006 0B       		.uleb128 0xb
 1848 0007 03       		.uleb128 0x3
 1849 0008 0E       		.uleb128 0xe
 1850 0009 1B       		.uleb128 0x1b
 1851 000a 0E       		.uleb128 0xe
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 49


 1852 000b 55       		.uleb128 0x55
 1853 000c 17       		.uleb128 0x17
 1854 000d 11       		.uleb128 0x11
 1855 000e 01       		.uleb128 0x1
 1856 000f 10       		.uleb128 0x10
 1857 0010 17       		.uleb128 0x17
 1858 0011 00       		.byte	0
 1859 0012 00       		.byte	0
 1860 0013 02       		.uleb128 0x2
 1861 0014 24       		.uleb128 0x24
 1862 0015 00       		.byte	0
 1863 0016 0B       		.uleb128 0xb
 1864 0017 0B       		.uleb128 0xb
 1865 0018 3E       		.uleb128 0x3e
 1866 0019 0B       		.uleb128 0xb
 1867 001a 03       		.uleb128 0x3
 1868 001b 0E       		.uleb128 0xe
 1869 001c 00       		.byte	0
 1870 001d 00       		.byte	0
 1871 001e 03       		.uleb128 0x3
 1872 001f 24       		.uleb128 0x24
 1873 0020 00       		.byte	0
 1874 0021 0B       		.uleb128 0xb
 1875 0022 0B       		.uleb128 0xb
 1876 0023 3E       		.uleb128 0x3e
 1877 0024 0B       		.uleb128 0xb
 1878 0025 03       		.uleb128 0x3
 1879 0026 08       		.uleb128 0x8
 1880 0027 00       		.byte	0
 1881 0028 00       		.byte	0
 1882 0029 04       		.uleb128 0x4
 1883 002a 16       		.uleb128 0x16
 1884 002b 00       		.byte	0
 1885 002c 03       		.uleb128 0x3
 1886 002d 0E       		.uleb128 0xe
 1887 002e 3A       		.uleb128 0x3a
 1888 002f 0B       		.uleb128 0xb
 1889 0030 3B       		.uleb128 0x3b
 1890 0031 05       		.uleb128 0x5
 1891 0032 49       		.uleb128 0x49
 1892 0033 13       		.uleb128 0x13
 1893 0034 00       		.byte	0
 1894 0035 00       		.byte	0
 1895 0036 05       		.uleb128 0x5
 1896 0037 35       		.uleb128 0x35
 1897 0038 00       		.byte	0
 1898 0039 49       		.uleb128 0x49
 1899 003a 13       		.uleb128 0x13
 1900 003b 00       		.byte	0
 1901 003c 00       		.byte	0
 1902 003d 06       		.uleb128 0x6
 1903 003e 2E       		.uleb128 0x2e
 1904 003f 00       		.byte	0
 1905 0040 3F       		.uleb128 0x3f
 1906 0041 19       		.uleb128 0x19
 1907 0042 03       		.uleb128 0x3
 1908 0043 0E       		.uleb128 0xe
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 50


 1909 0044 3A       		.uleb128 0x3a
 1910 0045 0B       		.uleb128 0xb
 1911 0046 3B       		.uleb128 0x3b
 1912 0047 0B       		.uleb128 0xb
 1913 0048 27       		.uleb128 0x27
 1914 0049 19       		.uleb128 0x19
 1915 004a 11       		.uleb128 0x11
 1916 004b 01       		.uleb128 0x1
 1917 004c 12       		.uleb128 0x12
 1918 004d 06       		.uleb128 0x6
 1919 004e 40       		.uleb128 0x40
 1920 004f 18       		.uleb128 0x18
 1921 0050 9642     		.uleb128 0x2116
 1922 0052 19       		.uleb128 0x19
 1923 0053 00       		.byte	0
 1924 0054 00       		.byte	0
 1925 0055 07       		.uleb128 0x7
 1926 0056 2E       		.uleb128 0x2e
 1927 0057 01       		.byte	0x1
 1928 0058 3F       		.uleb128 0x3f
 1929 0059 19       		.uleb128 0x19
 1930 005a 03       		.uleb128 0x3
 1931 005b 0E       		.uleb128 0xe
 1932 005c 3A       		.uleb128 0x3a
 1933 005d 0B       		.uleb128 0xb
 1934 005e 3B       		.uleb128 0x3b
 1935 005f 0B       		.uleb128 0xb
 1936 0060 27       		.uleb128 0x27
 1937 0061 19       		.uleb128 0x19
 1938 0062 11       		.uleb128 0x11
 1939 0063 01       		.uleb128 0x1
 1940 0064 12       		.uleb128 0x12
 1941 0065 06       		.uleb128 0x6
 1942 0066 40       		.uleb128 0x40
 1943 0067 18       		.uleb128 0x18
 1944 0068 9642     		.uleb128 0x2116
 1945 006a 19       		.uleb128 0x19
 1946 006b 01       		.uleb128 0x1
 1947 006c 13       		.uleb128 0x13
 1948 006d 00       		.byte	0
 1949 006e 00       		.byte	0
 1950 006f 08       		.uleb128 0x8
 1951 0070 34       		.uleb128 0x34
 1952 0071 00       		.byte	0
 1953 0072 03       		.uleb128 0x3
 1954 0073 0E       		.uleb128 0xe
 1955 0074 3A       		.uleb128 0x3a
 1956 0075 0B       		.uleb128 0xb
 1957 0076 3B       		.uleb128 0x3b
 1958 0077 0B       		.uleb128 0xb
 1959 0078 49       		.uleb128 0x49
 1960 0079 13       		.uleb128 0x13
 1961 007a 02       		.uleb128 0x2
 1962 007b 18       		.uleb128 0x18
 1963 007c 00       		.byte	0
 1964 007d 00       		.byte	0
 1965 007e 09       		.uleb128 0x9
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 51


 1966 007f 2E       		.uleb128 0x2e
 1967 0080 00       		.byte	0
 1968 0081 3F       		.uleb128 0x3f
 1969 0082 19       		.uleb128 0x19
 1970 0083 03       		.uleb128 0x3
 1971 0084 0E       		.uleb128 0xe
 1972 0085 3A       		.uleb128 0x3a
 1973 0086 0B       		.uleb128 0xb
 1974 0087 3B       		.uleb128 0x3b
 1975 0088 05       		.uleb128 0x5
 1976 0089 27       		.uleb128 0x27
 1977 008a 19       		.uleb128 0x19
 1978 008b 11       		.uleb128 0x11
 1979 008c 01       		.uleb128 0x1
 1980 008d 12       		.uleb128 0x12
 1981 008e 06       		.uleb128 0x6
 1982 008f 40       		.uleb128 0x40
 1983 0090 18       		.uleb128 0x18
 1984 0091 9642     		.uleb128 0x2116
 1985 0093 19       		.uleb128 0x19
 1986 0094 00       		.byte	0
 1987 0095 00       		.byte	0
 1988 0096 0A       		.uleb128 0xa
 1989 0097 2E       		.uleb128 0x2e
 1990 0098 00       		.byte	0
 1991 0099 3F       		.uleb128 0x3f
 1992 009a 19       		.uleb128 0x19
 1993 009b 03       		.uleb128 0x3
 1994 009c 0E       		.uleb128 0xe
 1995 009d 3A       		.uleb128 0x3a
 1996 009e 0B       		.uleb128 0xb
 1997 009f 3B       		.uleb128 0x3b
 1998 00a0 05       		.uleb128 0x5
 1999 00a1 27       		.uleb128 0x27
 2000 00a2 19       		.uleb128 0x19
 2001 00a3 11       		.uleb128 0x11
 2002 00a4 01       		.uleb128 0x1
 2003 00a5 12       		.uleb128 0x12
 2004 00a6 06       		.uleb128 0x6
 2005 00a7 40       		.uleb128 0x40
 2006 00a8 18       		.uleb128 0x18
 2007 00a9 9742     		.uleb128 0x2117
 2008 00ab 19       		.uleb128 0x19
 2009 00ac 00       		.byte	0
 2010 00ad 00       		.byte	0
 2011 00ae 0B       		.uleb128 0xb
 2012 00af 2E       		.uleb128 0x2e
 2013 00b0 01       		.byte	0x1
 2014 00b1 3F       		.uleb128 0x3f
 2015 00b2 19       		.uleb128 0x19
 2016 00b3 03       		.uleb128 0x3
 2017 00b4 0E       		.uleb128 0xe
 2018 00b5 3A       		.uleb128 0x3a
 2019 00b6 0B       		.uleb128 0xb
 2020 00b7 3B       		.uleb128 0x3b
 2021 00b8 05       		.uleb128 0x5
 2022 00b9 27       		.uleb128 0x27
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 52


 2023 00ba 19       		.uleb128 0x19
 2024 00bb 49       		.uleb128 0x49
 2025 00bc 13       		.uleb128 0x13
 2026 00bd 11       		.uleb128 0x11
 2027 00be 01       		.uleb128 0x1
 2028 00bf 12       		.uleb128 0x12
 2029 00c0 06       		.uleb128 0x6
 2030 00c1 40       		.uleb128 0x40
 2031 00c2 18       		.uleb128 0x18
 2032 00c3 9742     		.uleb128 0x2117
 2033 00c5 19       		.uleb128 0x19
 2034 00c6 01       		.uleb128 0x1
 2035 00c7 13       		.uleb128 0x13
 2036 00c8 00       		.byte	0
 2037 00c9 00       		.byte	0
 2038 00ca 0C       		.uleb128 0xc
 2039 00cb 05       		.uleb128 0x5
 2040 00cc 00       		.byte	0
 2041 00cd 03       		.uleb128 0x3
 2042 00ce 0E       		.uleb128 0xe
 2043 00cf 3A       		.uleb128 0x3a
 2044 00d0 0B       		.uleb128 0xb
 2045 00d1 3B       		.uleb128 0x3b
 2046 00d2 05       		.uleb128 0x5
 2047 00d3 49       		.uleb128 0x49
 2048 00d4 13       		.uleb128 0x13
 2049 00d5 02       		.uleb128 0x2
 2050 00d6 18       		.uleb128 0x18
 2051 00d7 00       		.byte	0
 2052 00d8 00       		.byte	0
 2053 00d9 0D       		.uleb128 0xd
 2054 00da 34       		.uleb128 0x34
 2055 00db 00       		.byte	0
 2056 00dc 03       		.uleb128 0x3
 2057 00dd 0E       		.uleb128 0xe
 2058 00de 3A       		.uleb128 0x3a
 2059 00df 0B       		.uleb128 0xb
 2060 00e0 3B       		.uleb128 0x3b
 2061 00e1 05       		.uleb128 0x5
 2062 00e2 49       		.uleb128 0x49
 2063 00e3 13       		.uleb128 0x13
 2064 00e4 02       		.uleb128 0x2
 2065 00e5 18       		.uleb128 0x18
 2066 00e6 00       		.byte	0
 2067 00e7 00       		.byte	0
 2068 00e8 0E       		.uleb128 0xe
 2069 00e9 2E       		.uleb128 0x2e
 2070 00ea 01       		.byte	0x1
 2071 00eb 3F       		.uleb128 0x3f
 2072 00ec 19       		.uleb128 0x19
 2073 00ed 03       		.uleb128 0x3
 2074 00ee 0E       		.uleb128 0xe
 2075 00ef 3A       		.uleb128 0x3a
 2076 00f0 0B       		.uleb128 0xb
 2077 00f1 3B       		.uleb128 0x3b
 2078 00f2 05       		.uleb128 0x5
 2079 00f3 27       		.uleb128 0x27
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 53


 2080 00f4 19       		.uleb128 0x19
 2081 00f5 49       		.uleb128 0x49
 2082 00f6 13       		.uleb128 0x13
 2083 00f7 11       		.uleb128 0x11
 2084 00f8 01       		.uleb128 0x1
 2085 00f9 12       		.uleb128 0x12
 2086 00fa 06       		.uleb128 0x6
 2087 00fb 40       		.uleb128 0x40
 2088 00fc 18       		.uleb128 0x18
 2089 00fd 9642     		.uleb128 0x2116
 2090 00ff 19       		.uleb128 0x19
 2091 0100 01       		.uleb128 0x1
 2092 0101 13       		.uleb128 0x13
 2093 0102 00       		.byte	0
 2094 0103 00       		.byte	0
 2095 0104 0F       		.uleb128 0xf
 2096 0105 2E       		.uleb128 0x2e
 2097 0106 01       		.byte	0x1
 2098 0107 3F       		.uleb128 0x3f
 2099 0108 19       		.uleb128 0x19
 2100 0109 03       		.uleb128 0x3
 2101 010a 0E       		.uleb128 0xe
 2102 010b 3A       		.uleb128 0x3a
 2103 010c 0B       		.uleb128 0xb
 2104 010d 3B       		.uleb128 0x3b
 2105 010e 05       		.uleb128 0x5
 2106 010f 27       		.uleb128 0x27
 2107 0110 19       		.uleb128 0x19
 2108 0111 11       		.uleb128 0x11
 2109 0112 01       		.uleb128 0x1
 2110 0113 12       		.uleb128 0x12
 2111 0114 06       		.uleb128 0x6
 2112 0115 40       		.uleb128 0x40
 2113 0116 18       		.uleb128 0x18
 2114 0117 9742     		.uleb128 0x2117
 2115 0119 19       		.uleb128 0x19
 2116 011a 01       		.uleb128 0x1
 2117 011b 13       		.uleb128 0x13
 2118 011c 00       		.byte	0
 2119 011d 00       		.byte	0
 2120 011e 10       		.uleb128 0x10
 2121 011f 2E       		.uleb128 0x2e
 2122 0120 01       		.byte	0x1
 2123 0121 3F       		.uleb128 0x3f
 2124 0122 19       		.uleb128 0x19
 2125 0123 03       		.uleb128 0x3
 2126 0124 0E       		.uleb128 0xe
 2127 0125 3A       		.uleb128 0x3a
 2128 0126 0B       		.uleb128 0xb
 2129 0127 3B       		.uleb128 0x3b
 2130 0128 05       		.uleb128 0x5
 2131 0129 27       		.uleb128 0x27
 2132 012a 19       		.uleb128 0x19
 2133 012b 11       		.uleb128 0x11
 2134 012c 01       		.uleb128 0x1
 2135 012d 12       		.uleb128 0x12
 2136 012e 06       		.uleb128 0x6
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 54


 2137 012f 40       		.uleb128 0x40
 2138 0130 18       		.uleb128 0x18
 2139 0131 9642     		.uleb128 0x2116
 2140 0133 19       		.uleb128 0x19
 2141 0134 01       		.uleb128 0x1
 2142 0135 13       		.uleb128 0x13
 2143 0136 00       		.byte	0
 2144 0137 00       		.byte	0
 2145 0138 11       		.uleb128 0x11
 2146 0139 01       		.uleb128 0x1
 2147 013a 01       		.byte	0x1
 2148 013b 49       		.uleb128 0x49
 2149 013c 13       		.uleb128 0x13
 2150 013d 01       		.uleb128 0x1
 2151 013e 13       		.uleb128 0x13
 2152 013f 00       		.byte	0
 2153 0140 00       		.byte	0
 2154 0141 12       		.uleb128 0x12
 2155 0142 21       		.uleb128 0x21
 2156 0143 00       		.byte	0
 2157 0144 49       		.uleb128 0x49
 2158 0145 13       		.uleb128 0x13
 2159 0146 2F       		.uleb128 0x2f
 2160 0147 0B       		.uleb128 0xb
 2161 0148 00       		.byte	0
 2162 0149 00       		.byte	0
 2163 014a 13       		.uleb128 0x13
 2164 014b 26       		.uleb128 0x26
 2165 014c 00       		.byte	0
 2166 014d 49       		.uleb128 0x49
 2167 014e 13       		.uleb128 0x13
 2168 014f 00       		.byte	0
 2169 0150 00       		.byte	0
 2170 0151 14       		.uleb128 0x14
 2171 0152 34       		.uleb128 0x34
 2172 0153 00       		.byte	0
 2173 0154 03       		.uleb128 0x3
 2174 0155 0E       		.uleb128 0xe
 2175 0156 3A       		.uleb128 0x3a
 2176 0157 0B       		.uleb128 0xb
 2177 0158 3B       		.uleb128 0x3b
 2178 0159 0B       		.uleb128 0xb
 2179 015a 49       		.uleb128 0x49
 2180 015b 13       		.uleb128 0x13
 2181 015c 3F       		.uleb128 0x3f
 2182 015d 19       		.uleb128 0x19
 2183 015e 02       		.uleb128 0x2
 2184 015f 18       		.uleb128 0x18
 2185 0160 00       		.byte	0
 2186 0161 00       		.byte	0
 2187 0162 00       		.byte	0
 2188              		.section	.debug_aranges,"",%progbits
 2189 0000 A4000000 		.4byte	0xa4
 2190 0004 0200     		.2byte	0x2
 2191 0006 00000000 		.4byte	.Ldebug_info0
 2192 000a 04       		.byte	0x4
 2193 000b 00       		.byte	0
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 55


 2194 000c 0000     		.2byte	0
 2195 000e 0000     		.2byte	0
 2196 0010 00000000 		.4byte	.LFB2
 2197 0014 24000000 		.4byte	.LFE2-.LFB2
 2198 0018 00000000 		.4byte	.LFB3
 2199 001c E0010000 		.4byte	.LFE3-.LFB3
 2200 0020 00000000 		.4byte	.LFB4
 2201 0024 38000000 		.4byte	.LFE4-.LFB4
 2202 0028 00000000 		.4byte	.LFB5
 2203 002c 1C000000 		.4byte	.LFE5-.LFB5
 2204 0030 00000000 		.4byte	.LFB6
 2205 0034 14000000 		.4byte	.LFE6-.LFB6
 2206 0038 00000000 		.4byte	.LFB7
 2207 003c 0A000000 		.4byte	.LFE7-.LFB7
 2208 0040 00000000 		.4byte	.LFB8
 2209 0044 48000000 		.4byte	.LFE8-.LFB8
 2210 0048 00000000 		.4byte	.LFB9
 2211 004c 44000000 		.4byte	.LFE9-.LFB9
 2212 0050 00000000 		.4byte	.LFB10
 2213 0054 20000000 		.4byte	.LFE10-.LFB10
 2214 0058 00000000 		.4byte	.LFB11
 2215 005c 30000000 		.4byte	.LFE11-.LFB11
 2216 0060 00000000 		.4byte	.LFB12
 2217 0064 30000000 		.4byte	.LFE12-.LFB12
 2218 0068 00000000 		.4byte	.LFB13
 2219 006c 20000000 		.4byte	.LFE13-.LFB13
 2220 0070 00000000 		.4byte	.LFB14
 2221 0074 20000000 		.4byte	.LFE14-.LFB14
 2222 0078 00000000 		.4byte	.LFB15
 2223 007c 34000000 		.4byte	.LFE15-.LFB15
 2224 0080 00000000 		.4byte	.LFB16
 2225 0084 2C000000 		.4byte	.LFE16-.LFB16
 2226 0088 00000000 		.4byte	.LFB17
 2227 008c A0000000 		.4byte	.LFE17-.LFB17
 2228 0090 00000000 		.4byte	.LFB18
 2229 0094 90000000 		.4byte	.LFE18-.LFB18
 2230 0098 00000000 		.4byte	.LFB19
 2231 009c 80000000 		.4byte	.LFE19-.LFB19
 2232 00a0 00000000 		.4byte	0
 2233 00a4 00000000 		.4byte	0
 2234              		.section	.debug_ranges,"",%progbits
 2235              	.Ldebug_ranges0:
 2236 0000 00000000 		.4byte	.LFB2
 2237 0004 24000000 		.4byte	.LFE2
 2238 0008 00000000 		.4byte	.LFB3
 2239 000c E0010000 		.4byte	.LFE3
 2240 0010 00000000 		.4byte	.LFB4
 2241 0014 38000000 		.4byte	.LFE4
 2242 0018 00000000 		.4byte	.LFB5
 2243 001c 1C000000 		.4byte	.LFE5
 2244 0020 00000000 		.4byte	.LFB6
 2245 0024 14000000 		.4byte	.LFE6
 2246 0028 00000000 		.4byte	.LFB7
 2247 002c 0A000000 		.4byte	.LFE7
 2248 0030 00000000 		.4byte	.LFB8
 2249 0034 48000000 		.4byte	.LFE8
 2250 0038 00000000 		.4byte	.LFB9
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 56


 2251 003c 44000000 		.4byte	.LFE9
 2252 0040 00000000 		.4byte	.LFB10
 2253 0044 20000000 		.4byte	.LFE10
 2254 0048 00000000 		.4byte	.LFB11
 2255 004c 30000000 		.4byte	.LFE11
 2256 0050 00000000 		.4byte	.LFB12
 2257 0054 30000000 		.4byte	.LFE12
 2258 0058 00000000 		.4byte	.LFB13
 2259 005c 20000000 		.4byte	.LFE13
 2260 0060 00000000 		.4byte	.LFB14
 2261 0064 20000000 		.4byte	.LFE14
 2262 0068 00000000 		.4byte	.LFB15
 2263 006c 34000000 		.4byte	.LFE15
 2264 0070 00000000 		.4byte	.LFB16
 2265 0074 2C000000 		.4byte	.LFE16
 2266 0078 00000000 		.4byte	.LFB17
 2267 007c A0000000 		.4byte	.LFE17
 2268 0080 00000000 		.4byte	.LFB18
 2269 0084 90000000 		.4byte	.LFE18
 2270 0088 00000000 		.4byte	.LFB19
 2271 008c 80000000 		.4byte	.LFE19
 2272 0090 00000000 		.4byte	0
 2273 0094 00000000 		.4byte	0
 2274              		.section	.debug_line,"",%progbits
 2275              	.Ldebug_line0:
 2276 0000 95020000 		.section	.debug_str,"MS",%progbits,1
 2276      02004000 
 2276      00000201 
 2276      FB0E0D00 
 2276      01010101 
 2277              	.LASF10:
 2278 0000 75696E74 		.ascii	"uint16\000"
 2278      313600
 2279              	.LASF48:
 2280 0007 61646347 		.ascii	"adcGain\000"
 2280      61696E00 
 2281              	.LASF24:
 2282 000f 636F756E 		.ascii	"counts\000"
 2282      747300
 2283              	.LASF54:
 2284 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2284      436F756E 
 2284      7473546F 
 2284      5F566F6C 
 2284      747300
 2285              	.LASF36:
 2286 0029 4144435F 		.ascii	"ADC_Init\000"
 2286      496E6974 
 2286      00
 2287              	.LASF7:
 2288 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2288      206C6F6E 
 2288      6720756E 
 2288      7369676E 
 2288      65642069 
 2289              	.LASF28:
 2290 0049 4144435F 		.ascii	"ADC_StartConvert\000"
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 57


 2290      53746172 
 2290      74436F6E 
 2290      76657274 
 2290      00
 2291              	.LASF6:
 2292 005a 6C6F6E67 		.ascii	"long long int\000"
 2292      206C6F6E 
 2292      6720696E 
 2292      7400
 2293              	.LASF0:
 2294 0068 7369676E 		.ascii	"signed char\000"
 2294      65642063 
 2294      68617200 
 2295              	.LASF30:
 2296 0074 73746174 		.ascii	"status\000"
 2296      757300
 2297              	.LASF13:
 2298 007b 696E7433 		.ascii	"int32\000"
 2298      3200
 2299              	.LASF25:
 2300 0081 4144435F 		.ascii	"ADC_Start\000"
 2300      53746172 
 2300      7400
 2301              	.LASF4:
 2302 008b 6C6F6E67 		.ascii	"long int\000"
 2302      20696E74 
 2302      00
 2303              	.LASF52:
 2304 0094 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2304      436F756E 
 2304      7473546F 
 2304      5F75566F 
 2304      6C747300 
 2305              	.LASF59:
 2306 00a8 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2306      636F756E 
 2306      74735065 
 2306      72313056 
 2306      6F6C7400 
 2307              	.LASF9:
 2308 00bc 75696E74 		.ascii	"uint8\000"
 2308      3800
 2309              	.LASF16:
 2310 00c2 646F7562 		.ascii	"double\000"
 2310      6C6500
 2311              	.LASF11:
 2312 00c9 75696E74 		.ascii	"uint32\000"
 2312      333200
 2313              	.LASF38:
 2314 00d0 6D61736B 		.ascii	"mask\000"
 2314      00
 2315              	.LASF57:
 2316 00d5 4144435F 		.ascii	"ADC_initVar\000"
 2316      696E6974 
 2316      56617200 
 2317              	.LASF33:
 2318 00e1 7265744D 		.ascii	"retMode\000"
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 58


 2318      6F646500 
 2319              	.LASF43:
 2320 00e9 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2320      5365744C 
 2320      696D6974 
 2320      4D61736B 
 2320      00
 2321              	.LASF8:
 2322 00fa 756E7369 		.ascii	"unsigned int\000"
 2322      676E6564 
 2322      20696E74 
 2322      00
 2323              	.LASF53:
 2324 0107 75566F6C 		.ascii	"uVolts\000"
 2324      747300
 2325              	.LASF5:
 2326 010e 6C6F6E67 		.ascii	"long unsigned int\000"
 2326      20756E73 
 2326      69676E65 
 2326      6420696E 
 2326      7400
 2327              	.LASF44:
 2328 0120 4144435F 		.ascii	"ADC_SetSatMask\000"
 2328      53657453 
 2328      61744D61 
 2328      736B00
 2329              	.LASF55:
 2330 012f 766F6C74 		.ascii	"volts\000"
 2330      7300
 2331              	.LASF23:
 2332 0135 746D7052 		.ascii	"tmpRegVal\000"
 2332      65675661 
 2332      6C00
 2333              	.LASF3:
 2334 013f 73686F72 		.ascii	"short unsigned int\000"
 2334      7420756E 
 2334      7369676E 
 2334      65642069 
 2334      6E7400
 2335              	.LASF29:
 2336 0152 4144435F 		.ascii	"ADC_StopConvert\000"
 2336      53746F70 
 2336      436F6E76 
 2336      65727400 
 2337              	.LASF60:
 2338 0162 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2338      43313120 
 2338      352E342E 
 2338      31203230 
 2338      31363036 
 2339 0195 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2339      20726576 
 2339      6973696F 
 2339      6E203233 
 2339      37373135 
 2340 01c8 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2340      66756E63 
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 59


 2340      74696F6E 
 2340      2D736563 
 2340      74696F6E 
 2341              	.LASF51:
 2342 01f0 6D566F6C 		.ascii	"mVolts\000"
 2342      747300
 2343              	.LASF19:
 2344 01f7 72656733 		.ascii	"reg32\000"
 2344      3200
 2345              	.LASF14:
 2346 01fd 666C6F61 		.ascii	"float32\000"
 2346      74333200 
 2347              	.LASF21:
 2348 0205 73697A65 		.ascii	"sizetype\000"
 2348      74797065 
 2348      00
 2349              	.LASF40:
 2350 020e 6C6F774C 		.ascii	"lowLimit\000"
 2350      696D6974 
 2350      00
 2351              	.LASF20:
 2352 0217 6C6F6E67 		.ascii	"long double\000"
 2352      20646F75 
 2352      626C6500 
 2353              	.LASF41:
 2354 0223 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2354      53657448 
 2354      6967684C 
 2354      696D6974 
 2354      00
 2355              	.LASF31:
 2356 0234 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2356      4973456E 
 2356      64436F6E 
 2356      76657273 
 2356      696F6E00 
 2357              	.LASF62:
 2358 0248 433A5C55 		.ascii	"C:\\Users\\black\\OneDrive\\Documents\\PSoC Creator"
 2358      73657273 
 2358      5C626C61 
 2358      636B5C4F 
 2358      6E654472 
 2359 0276 5C424C45 		.ascii	"\\BLE_HID_Keyboard212006\\BLE_HID_Keyboard212006.cy"
 2359      5F484944 
 2359      5F4B6579 
 2359      626F6172 
 2359      64323132 
 2360 02a7 64736E00 		.ascii	"dsn\000"
 2361              	.LASF17:
 2362 02ab 696E7436 		.ascii	"int64\000"
 2362      3400
 2363              	.LASF37:
 2364 02b1 4144435F 		.ascii	"ADC_SetChanMask\000"
 2364      53657443 
 2364      68616E4D 
 2364      61736B00 
 2365              	.LASF61:
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 60


 2366 02c1 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
 2366      72617465 
 2366      645F536F 
 2366      75726365 
 2366      5C50536F 
 2367              	.LASF47:
 2368 02de 4144435F 		.ascii	"ADC_SetGain\000"
 2368      53657447 
 2368      61696E00 
 2369              	.LASF15:
 2370 02ea 666C6F61 		.ascii	"float\000"
 2370      7400
 2371              	.LASF42:
 2372 02f0 68696768 		.ascii	"highLimit\000"
 2372      4C696D69 
 2372      7400
 2373              	.LASF49:
 2374 02fa 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2374      436F756E 
 2374      7473546F 
 2374      5F6D566F 
 2374      6C747300 
 2375              	.LASF39:
 2376 030e 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2376      5365744C 
 2376      6F774C69 
 2376      6D697400 
 2377              	.LASF1:
 2378 031e 756E7369 		.ascii	"unsigned char\000"
 2378      676E6564 
 2378      20636861 
 2378      7200
 2379              	.LASF58:
 2380 032c 4144435F 		.ascii	"ADC_offset\000"
 2380      6F666673 
 2380      657400
 2381              	.LASF2:
 2382 0337 73686F72 		.ascii	"short int\000"
 2382      7420696E 
 2382      7400
 2383              	.LASF27:
 2384 0341 4144435F 		.ascii	"ADC_Stop\000"
 2384      53746F70 
 2384      00
 2385              	.LASF22:
 2386 034a 63684E75 		.ascii	"chNum\000"
 2386      6D00
 2387              	.LASF34:
 2388 0350 6368616E 		.ascii	"chan\000"
 2388      00
 2389              	.LASF18:
 2390 0355 63686172 		.ascii	"char\000"
 2390      00
 2391              	.LASF56:
 2392 035a 4144435F 		.ascii	"ADC_channelsConfig\000"
 2392      6368616E 
 2392      6E656C73 
ARM GAS  C:\Users\black\AppData\Local\Temp\cc07rFbH.s 			page 61


 2392      436F6E66 
 2392      696700
 2393              	.LASF46:
 2394 036d 6F666673 		.ascii	"offset\000"
 2394      657400
 2395              	.LASF50:
 2396 0374 61646343 		.ascii	"adcCounts\000"
 2396      6F756E74 
 2396      7300
 2397              	.LASF26:
 2398 037e 4144435F 		.ascii	"ADC_Enable\000"
 2398      456E6162 
 2398      6C6500
 2399              	.LASF12:
 2400 0389 696E7431 		.ascii	"int16\000"
 2400      3600
 2401              	.LASF45:
 2402 038f 4144435F 		.ascii	"ADC_SetOffset\000"
 2402      5365744F 
 2402      66667365 
 2402      7400
 2403              	.LASF35:
 2404 039d 72657375 		.ascii	"result\000"
 2404      6C7400
 2405              	.LASF32:
 2406 03a4 4144435F 		.ascii	"ADC_GetResult16\000"
 2406      47657452 
 2406      6573756C 
 2406      74313600 
 2407              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
